<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AI on Olin Johnson</title>
    <link>https://olinjohnson.github.io/categories/ai/</link>
    <description>Recent content in AI on Olin Johnson</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 28 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://olinjohnson.github.io/categories/ai/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Part 0: Bits and Brains?</title>
      <link>https://olinjohnson.github.io/posts/part-0-bits-and-brains/</link>
      <pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://olinjohnson.github.io/posts/part-0-bits-and-brains/</guid>
      <description>A conceptual overview of the theory behind neural networks</description>
      <content:encoded><![CDATA[<p>Recently, I&rsquo;ve been doing a lot of work learning about AI and neural networks–specifically by creating deep learning models from scratch. So, I thought I&rsquo;d document some of that learning in a multi-part series about deep learning.</p>
<p>In case you&rsquo;re not already familiar, neural networks are AI processes that are modeled after the human brain and can solve problems by simulating human methods of learning.</p>
<p>For example, in the same way that your brain has learned to differentiate between cats and dogs, we can also teach a neural network to classify types of pets (among other things).</p>
<h3 id="but-how-is-a-computer-able-to-learn-like-a-person">But how is a computer able to learn like a person?</h3>
<p>Well, let&rsquo;s first look at one of the most essential building blocks of the human brain:</p>
<p><img loading="lazy" src="/posts/neural_networks_series/neuron.jpg" alt="neuron"  />
</p>
<p><em>Image courtesy of <a href="https://www.simplypsychology.org/neuron.html">https://www.simplypsychology.org/neuron.html</a></em></p>
<p>As you can see, this is a model of a neuron. For our purposes, we&rsquo;ll mostly focus on the dendrites and axons of the neuron.</p>
<p>In your brain, neurons link together to form neuron chains, which propagate chemical signals from neuron to neuron. These chemical signals are what ultimately determine whether or not certain neurons fire.</p>
<p>In order to form these chains, the dendrites of one neuron connect to the axons of another (via axon terminals) over a space called a synapse. By connecting these ends, you can see how neurons can be strung together to form really long chain chains.</p>
<p>It&rsquo;s kind of like plugging extension cords into each other:</p>
<p><img loading="lazy" src="/posts/neural_networks_series/extension-cord-plugs.jpg" alt="extension cords"  />
</p>
<p>Using the extension cord example, it&rsquo;s easy to see how a lot of neurons could be connected together (billions of &rsquo;em) and how they can fire in succession based on chemical signals that travel through the neuron chains.</p>
<h3 id="ok-so">Ok, so?</h3>
<p>In essence, a neural network tries to simulate these complex chains of neurons to make decisions like a human would.</p>
<p>Computationally speaking, we can do this by representing neurons using code, and then simulating how neuron chains would fire to make a decision or judgment like a human brain.</p>
<p>Of course, this is just a brief overview of the philosophy behind neural networks and it barely even scratches the surface of their complexity. Look out for Part 1 where I&rsquo;ll go more in depth into the code required to create the foundation of a neural network.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Optimizations Using Bitboards</title>
      <link>https://olinjohnson.github.io/posts/optimizing-chess-othello-and-connect-4-with-bitboards/</link>
      <pubDate>Sat, 20 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://olinjohnson.github.io/posts/optimizing-chess-othello-and-connect-4-with-bitboards/</guid>
      <description>Optimizing chess, othello, and connect 4 using bitboards to speed up move generation and evaluation</description>
      <content:encoded><![CDATA[<p>I&rsquo;ve recently been working on creating AIs for games like chess and othello, and I&rsquo;ve been putting a lot of thought into the move generation functions and search algorithms of these AIs. Since these components are run so many times, it&rsquo;s important to make sure that they are very efficient so they don&rsquo;t slow down the computer too much and impact the AIs performance.</p>
<p>Fortunately, I was able to implement few huge optimizations that drastically reduced the running time of my AI, which included a change in how the board is represented.</p>
<p>It turns out that instead of representing the positions of pieces on the game board with something like a 2d array, there’s a much more efficient data structure we can use: a bitboard.</p>
<p>Actually, multiple bitboards.</p>
<p>What I realized is that it&rsquo;s much more efficient to represent the board simply as a collection of large numbers, instead of multi-dimensional arrays or some other complex structure.</p>
<p>In practice, what I mean by this is that we can take a 64 bit integer, called a bitboard, and assign each bit to a corresponding tile on a board like a chess board. By doing this, we can essentially store the board configuration using an integer, which takes up way less space in your computer&rsquo;s memory than something like an array. Bitboards also have a couple other incredible advantages that I&rsquo;ll dive into in a bit.</p>
<p>For example, In the game Othello, we might have 2 bitboards – 1 to represent the position of black pieces on the board and another for the white pieces. Each “on” bit, or 1, in a bitboard represents an occupied tile where a player’s piece is. Each “off” bit, or 0, represents an empty tile. This is why we have a bitboard for both black and white, to distinguish between each player’s pieces.</p>
<p>Defining a bitboard in C# can be as simple as declaring an unsigned (non-negative) long integer.</p>
<pre tabindex="0"><code>ulong bitboard = 0;
</code></pre><p>In a game like Othello, we can also create a class for the game board with attributes to hold the bitboards for black and white.</p>
<pre tabindex="0"><code>class Board
{
	ulong white_pieces = 0;
	ulong black_pieces = 0;

	public Board()
    	{
        	white_pieces = 0x1008000000;
        	black_pieces = 0x810000000;
    	}
}
</code></pre><p>Now, if we initialize a new <code>Board</code>, it will give us the starting position for an Othello game.</p>
<p><img loading="lazy" src="/posts/bitboards/starting_board.png" alt="Starting position for Othello"  />
</p>
<p>You can see that if you convert the values for <code>white_pieces</code> and <code>black_pieces</code> from hexadecimal to binary, the activated bits in each bitboard will line up with the positions of the pieces on the board.</p>
<pre tabindex="0"><code>ulong white_pieces = 0x1008000000;

/*
*	0x1008000000 = 0000000000000000000000000001000000001000000000000000000000000000
*
*	0 0 0 0 0 0 0 0
*	0 0 0 0 0 0 0 0
*	0 0 0 0 0 0 0 0
*	0 0 0 1 0 0 0 0
*	0 0 0 0 1 0 0 0
*	0 0 0 0 0 0 0 0
*	0 0 0 0 0 0 0 0
*	0 0 0 0 0 0 0 0
*/
</code></pre><pre tabindex="0"><code>ulong black_pieces = 0x810000000;

/*
*	0x810000000 = 0000000000000000000000000000100000010000000000000000000000000000
*
*	0 0 0 0 0 0 0 0
*	0 0 0 0 0 0 0 0
*	0 0 0 0 0 0 0 0
*	0 0 0 0 1 0 0 0
*	0 0 0 1 0 0 0 0
*	0 0 0 0 0 0 0 0
*	0 0 0 0 0 0 0 0
*	0 0 0 0 0 0 0 0
*/
</code></pre><h3 id="why-use-bitboards">Why use bitboards?</h3>
<p>Well, I can assure you, though bitboards seem like a lot of hassle initially, they are well worth it for their performance benefits.</p>
<p>The primary reason why bitboards are so computationally efficient is because you can utilize bitwise operators to speed up calculation and eleminate conditionals.</p>
<p>Here&rsquo;s an example:</p>
<hr>
<p>In the game connect 4, in order to detect a win, we need to evaluate if either player has 4 in a row.</p>
<p>We can start by initializing two bitboards, one to keep track of the red player’s pieces and another to keep track of the yellow player’s pieces. Since a connect 4 board is smaller (only 42 tiles), we only need 42 bits to represent the board. So, we’ll assign each of the first 42 bits to a position on the board.</p>
<pre tabindex="0"><code>ulong red_pieces = 0;
ulong yellow_pieces = 0;
</code></pre><p><img loading="lazy" src="/posts/bitboards/assigned-bits.png" alt="Bits assigned to board positions"  />
</p>
<p>Now let’s assume the following board position:</p>
<p><img loading="lazy" src="/posts/bitboards/yellow-win.png" alt="A vertical win for yellow"  />
</p>
<p>As you can see in the above screenshot, yellow has won the game by placing 4 of their pieces vertically in a row.</p>
<p>Using a bitboard, we can check for a vertical win (<em>in just 3 lines of code!</em>) by utilizing the bitwise AND and bitshift operators as follows:</p>
<pre tabindex="0"><code>// Step 1:
ulong pairs = yellow_pieces &amp; (yellow_pieces &lt;&lt; 1);
// Step 2:
ulong quads = pairs &amp; (pairs &lt;&lt; 2);
// Step 3 – returning the result from steps 1 and 2:
return quads &gt; 0
</code></pre><p><strong>1.</strong> First of all, we start by initializing a new bitboard, called <code>pairs</code>.</p>
<p>The goal of this bitboard is to store all of the vertical pairs of yellow coins, all the 2-in-a-row combinations.</p>
<p>To do this, we first bitshift all the yellow pieces left 1 bit – the upwards direction.</p>
<p><img loading="lazy" src="/posts/bitboards/yellow_shifted.png" alt="example of shifting"  />
</p>
<p>As you can see, bit 19 gets shifted to bit 20, bit 20 gets shifted to bit 21, bit 21 gets shifted to bit 22, and bit 22 gets shifted to bit 23.</p>
<p>Now that we have shifted all of the pieces up by 1 tile, we record which pieces align with the initial yellow pieces. If they do align, then we have found 2 in a row.</p>
<p>We can do this by using the bitwise AND operator.</p>
<pre tabindex="0"><code>/*
*	0 0 0 0 0 0 0				0 0 0 0 0 0 0
*	0 0 0 0 0 0 0				0 0 0 1 0 0 0
*	0 0 0 1 0 0 0				0 0 0 1 0 0 0
*	0 0 0 1 0 0 0		   &amp;		0 0 0 1 0 0 0
*	0 0 0 1 0 0 0				0 0 0 1 0 0 0
*	0 0 0 1 0 0 0				0 0 0 0 0 0 0
*/

// 000000000000000000001111000000000000000000 &amp; 000000000000000000011110000000000000000000
</code></pre><p>Bits 20, 21, and 22 are activated on both bitboards, so when we AND them together, those are the bits that will be left on.</p>
<pre tabindex="0"><code>/*
*	0 0 0 0 0 0 0
*	0 0 0 0 0 0 0
*	0 0 0 1 0 0 0
*	0 0 0 1 0 0 0
*	0 0 0 1 0 0 0
*	0 0 0 0 0 0 0
*/

// 000000000000000000001110000000000000000000
</code></pre><p>Since there are three activated bits, we can see that there were three pairs of vertical yellow pieces.</p>
<p><strong>2.</strong> Next, we’ll repeat the whole process again to find 4 in a row – with a slight tweak.</p>
<p>This time, we’re going to calculate a bitboard called <code>quads</code> – we’ll take the bitboard <code>pairs</code> that we just calculated and bitshift it left <strong>2 bits</strong>. This is to find “pairs of pairs”, or 4 in a row.</p>
<pre tabindex="0"><code>// 000000000000000000001110000000000000000000 &lt;&lt; 2
/*
* 	Result:
*
*	0 0 0 1 0 0 0
*	0 0 0 1 0 0 0
*	0 0 0 1 0 0 0
*	0 0 0 0 0 0 0
*	0 0 0 0 0 0 0
*	0 0 0 0 0 0 0
*/

// 000000000000000000111000000000000000000000
</code></pre><p>Finally, we’ll AND the result with <code>pairs</code> . If there are any bits left on after this operation, we’ll know we have found four in a row.</p>
<pre tabindex="0"><code>/*
*	0 0 0 1 0 0 0				0 0 0 0 0 0 0
*	0 0 0 1 0 0 0				0 0 0 0 0 0 0
*	0 0 0 1 0 0 0				0 0 0 1 0 0 0
*	0 0 0 0 0 0 0		   &amp;		0 0 0 1 0 0 0
*	0 0 0 0 0 0 0				0 0 0 1 0 0 0
*	0 0 0 0 0 0 0				0 0 0 0 0 0 0
*/

// 000000000000000000111000000000000000000000 &amp; 000000000000000000001110000000000000000000
</code></pre><p>Result:</p>
<pre tabindex="0"><code>/*
*	0 0 0 0 0 0 0
*	0 0 0 0 0 0 0
*	0 0 0 1 0 0 0
*	0 0 0 0 0 0 0
*	0 0 0 0 0 0 0
*	0 0 0 0 0 0 0
*/

// 000000000000000000001000000000000000000000
</code></pre><p>1 bit (that corresponds to the topmost yellow piece) has been left activated - this means that we have found four in a row.</p>
<p><strong>3.</strong> If no bits have been left activated, the value of <code>quads</code> will be 0, which is why we return <code>true</code> if quads is bigger than 1 - to signify a win.</p>
<p>To calculate four in a row in other directions too, we can just change the amount bitshifted. For example, we could calculate horizontal wins by bitshifting 6 bits to the left, instead of 1.</p>
<hr>
<p>As you can see, using bitboards, we are able to calculate wins in connect 4 (and many other applications) without the use of many conditionals and using very low-level operations. This makes bitboards remarkably fast – good for an AI that needs to check for wins millions of times.</p>
<p>You can imagine how bitboards can also be applied to more complex games like chess, where you&rsquo;d have a bitboard for each type of piece and color (i.e. A bitboard for white knights).</p>
<p>Check out my full <a href="https://github.com/olinjohnson/Connect4">Connect 4 AI</a><!-- raw HTML omitted --> and <a href="https://github.com/olinjohnson/Othello">Othello AI</a><!-- raw HTML omitted -->.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
