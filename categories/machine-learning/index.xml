<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>machine learning on Olin Johnson</title>
    <link>https://olinjohnson.github.io/categories/machine-learning/</link>
    <description>Recent content in machine learning on Olin Johnson</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 20 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://olinjohnson.github.io/categories/machine-learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Neural Networks Part 2: Neuron Code</title>
      <link>https://olinjohnson.github.io/posts/neural-networks-part-2-neuron-code/</link>
      <pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://olinjohnson.github.io/posts/neural-networks-part-2-neuron-code/</guid>
      <description>A more thorough examination of neurons and how to represent them in code</description>
      <content:encoded><![CDATA[<div style="background-color: var(--entry); margin-bottom:20px; margin-top:10px; padding:10px; border-radius: var(--radius)"><em>If you haven&rsquo;t been following along with the previous posts in this neural networks series, I highly recommend reading those before continuing forward.</em></div>

<p>At this point in the series, I&rsquo;ve laid out the general concept for how neural networks are composed and how they can utilize interconnected layers of neurons to make predictions. In this post, we&rsquo;ll check out how to compute the exact values of neurons and begin to lay down some code for a simple neural net.</p>
<h3 id="a-few-notes-about-neurons">A few notes about neurons</h3>
<p>Before we dive into computing the values of neurons, there are a couple other important components that I&rsquo;ve left out until now: weights and biases.</p>
<p>First, we&rsquo;ll start with weights. A neuron&rsquo;s weight is a number that represents the strength of the neuron&rsquo;s connection to its input.</p>
<p>Here&rsquo;s a model:
<img loading="lazy" src="/posts/neural_networks_series/images/weights.png" alt="example image"  />
</p>
<p>As you can see, there&rsquo;s one neuron (the red circle) connected to an input neuron. The line between them (\(w_0\)) represents the neuron&rsquo;s weight.</p>
<p>Like I said before, the weight is a relatively low number that represents the strength of the connection between a neuron and it&rsquo;s inputs. More generally, a neuron&rsquo;s weight is a measure of how much its input influences its output.</p>
<hr>
<p>Secondly, we&rsquo;ll talk about the bias.</p>
<p><img loading="lazy" src="/posts/neural_networks_series/images/bias.png" alt="example image"  />
</p>
<p>Though I&rsquo;ve chosen to represent the bias with a filled green circle (\(b_0\)) in the example image above, the bias is not a neuron, nor is the connection between the bias and the neuron a weight. Instead, a neuron&rsquo;s bias is just a constant value that is used to offset the neuron&rsquo;s output during computation. It&rsquo;s similar to the variable \(b\) for the linear function \(y=mx+b\), and it&rsquo;s used to adjust the barriers of the neuron&rsquo;s output. The purpose of the bias will become more clear after we get into computing and programming neurons.</p>
<hr>
<h2 id="calculating-the-value-of-a-neuron">Calculating the value of a neuron</h2>
<p><img loading="lazy" src="/posts/neural_networks_series/images/ncompute.png" alt="example image"  />
</p>
<p>As you can see in the graphic, there is a fairly simple formula to compute the value of a neuron:</p>
<p>$$ y = input * weight + bias $$</p>
<p>The input is represented in the graphic by the value \(x_0\), the weight is represented by the value \(w_0\), and the bias is represented by the value \(b_0\).</p>
<p>To find the neuron&rsquo;s value, we just multiply the neuron&rsquo;s input and weight together (\(x_0 * w_0\)) and then add the bias (\(x_0 * w_0 + b_0\)).</p>
<p>Breaking it down, we can easily recognize the functions of the weights and biases that I talked about earlier.</p>
<p>Remember when I said:</p>











  





  


<blockquote>
  <p>a neuron&rsquo;s weight is a measure of how much its input influences its output</p>
  <footer>
    <strong></strong>
    
      
        
      
    
  </footer>
</blockquote>

<p>That&rsquo;s why we multiply the weight by the input - because it effectively has the power to scale our input up and down.</p>
<p>And remember this?











  





  


<blockquote>
  <p>a neuron&rsquo;s bias is just a constant value that is used to offset the neuron&rsquo;s output during computation</p>
  <footer>
    <strong></strong>
    
      
        
      
    
  </footer>
</blockquote>
</p>
<p>That&rsquo;s why we add the \(b\) value at the end - because it shifts the entire value of the neuron up or down.</p>
<h3 id="but-what-if-a-neuron-has-multiple-inputs">But what if a neuron has multiple inputs?</h3>
<p>Think back to the following model from <a href="/posts/neural-networks-part-1-looking-at-layers">Part 1</a>:</p>
<p><img loading="lazy" src="/posts/neural_networks_series/images/model1.png" alt="example image"  />
</p>
<p>As you can see, all of the neurons in the hidden layer have two inputs, not just one. You&rsquo;ll also notice that they each  have two weights as well, that correspond to the two inputs.</p>
<p>So, to calculate the value of a neuron with multiple inputs, we multiply each of its inputs by their respective weights, get the sum, and then add the bias.</p>
<p>The formula looks like this, where \(n\) is the total number of inputs to a neuron:</p>
<p>$$ y=b+\sum^{n}_{i=0}x_i * w_i $$</p>
<p>For example, take the following neuron with 2 inputs and 2 weights:</p>
<p><img loading="lazy" src="/posts/neural_networks_series/images/multi-inputs.png" alt="example image"  />
</p>
<div style="background-color: var(--entry); margin-bottom:20px; margin-top:10px; padding:10px; border-radius: var(--radius)"><em>Note: the bias isn&rsquo;t always represented in the model - it&rsquo;s presence is assumed</em></div>

<p>Like I said before, in order to calculate a neuron&rsquo;s value with multiple inputs, we multiply each input by its respective weight, sum them up, and then add the bias.</p>
<p>So to calculate the value of the green neuron, we need to do:</p>
<p>$$ x_0 * w_0 + x_1 * w_1 + b $$</p>
<hr>
<h1 id="coding-a-neuron">Coding a neuron</h1>
<p>Alright - now that we&rsquo;ve finally gotten through most of the basics for understanding how a neural network functions, we can start representing some of it with code. We&rsquo;ll start very lightly by understanding how to represent a neuron and its components in code.</p>
<div style="background-color: var(--entry); margin-bottom:20px; margin-top:10px; padding:10px; border-radius: var(--radius)"><em>I&rsquo;ll do most of the coding in this series in python, but if you&rsquo;re familiar with other programming languages, all the same concepts will still apply.</em></div>

<p>To represent a neuron in code, we could start by creating a class that holds the neuron&rsquo;s components - mainly the neuron&rsquo;s weights and its bias.</p>
<div class="highlight"><pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#81a1c1;font-weight:bold">class</span> <span style="color:#8fbcbb">Neuron</span><span style="color:#eceff4">:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#81a1c1;font-weight:bold">def</span> __init__<span style="color:#eceff4">(</span>self<span style="color:#eceff4">,</span> num_inputs<span style="color:#eceff4">):</span>
</span></span><span style="display:flex;"><span>        <span style="color:#616e87;font-style:italic"># initialize self.weights</span>
</span></span><span style="display:flex;"><span>        <span style="color:#616e87;font-style:italic"># initialize self.bias</span></span></span></code></pre></div>
<p>You can see in the constructor method that the class will take the number of inputs (<code>num_inputs</code>) as an argument - this is because the number of weights that we initialize depends on the number of inputs (one weight for every input).</p>
<p>For now, we&rsquo;ll start by initializing the weights and bias randomly.</p>
<div class="highlight"><pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#81a1c1;font-weight:bold">import</span> <span style="color:#8fbcbb">numpy</span> <span style="color:#81a1c1;font-weight:bold">as</span> <span style="color:#8fbcbb">np</span>
</span></span><span style="display:flex;"><span><span style="color:#81a1c1;font-weight:bold">class</span> <span style="color:#8fbcbb">Neuron</span><span style="color:#eceff4">:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#81a1c1;font-weight:bold">def</span> __init__<span style="color:#eceff4">(</span>self<span style="color:#eceff4">,</span> num_inputs<span style="color:#eceff4">):</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#81a1c1">.</span>weights <span style="color:#81a1c1">=</span> np<span style="color:#81a1c1">.</span>random<span style="color:#81a1c1">.</span>randn<span style="color:#eceff4">(</span>num_inputs<span style="color:#eceff4">)</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#81a1c1">.</span>bias <span style="color:#81a1c1">=</span> np<span style="color:#81a1c1">.</span>random<span style="color:#81a1c1">.</span>randn<span style="color:#eceff4">()</span></span></span></code></pre></div>
<p>We can also add a method to calculate the neuron&rsquo;s value by multiplying its weights and inputs together. We&rsquo;ll use a <a href="https://en.wikipedia.org/wiki/Dot_product">dot product</a> for this. <em>If you&rsquo;re unsure about how dot products work, don&rsquo;t worry - I&rsquo;ll explain them more thoroughly in the next post</em>.</p>
<div class="highlight"><pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#81a1c1;font-weight:bold">import</span> <span style="color:#8fbcbb">numpy</span> <span style="color:#81a1c1;font-weight:bold">as</span> <span style="color:#8fbcbb">np</span>
</span></span><span style="display:flex;"><span><span style="color:#81a1c1;font-weight:bold">class</span> <span style="color:#8fbcbb">Neuron</span><span style="color:#eceff4">:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#81a1c1;font-weight:bold">def</span> __init__<span style="color:#eceff4">(</span>self<span style="color:#eceff4">,</span> num_inputs<span style="color:#eceff4">):</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#81a1c1">.</span>weights <span style="color:#81a1c1">=</span> np<span style="color:#81a1c1">.</span>random<span style="color:#81a1c1">.</span>randn<span style="color:#eceff4">(</span>num_inputs<span style="color:#eceff4">)</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#81a1c1">.</span>bias <span style="color:#81a1c1">=</span> np<span style="color:#81a1c1">.</span>random<span style="color:#81a1c1">.</span>randn<span style="color:#eceff4">()</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#81a1c1;font-weight:bold">def</span> <span style="color:#88c0d0">calculate</span><span style="color:#eceff4">(</span>self<span style="color:#eceff4">,</span> inputs<span style="color:#eceff4">):</span>
</span></span><span style="display:flex;"><span>        <span style="color:#81a1c1;font-weight:bold">return</span> np<span style="color:#81a1c1">.</span>dot<span style="color:#eceff4">(</span>inputs<span style="color:#eceff4">,</span> self<span style="color:#81a1c1">.</span>weights<span style="color:#81a1c1">.</span>T<span style="color:#eceff4">)</span> <span style="color:#81a1c1">+</span> self<span style="color:#81a1c1">.</span>bias</span></span></code></pre></div>
<p>You&rsquo;ll see the limitations of some of this code as we get more in-depth in the following chapters of the series, but for now, this is a good start for representing a neuron.</p>
<p>Keep an eye out for the next post where we&rsquo;ll take a deeper dive into neuron code and representing neurons in the context of layers.</p>
<style>
    .toc {
        cursor: default;
        width:100%;
        padding-left:var(--gap);
        padding-right:var(--gap);
        padding-top:.6em;
    }
    .topper {
        border-bottom: 1px solid var(--primary);
        padding-bottom: .6em;
        padding-top: .2em;
    }
    ul {
        margin-top: .8em;
        margin-bottom: .8em!important;
        padding-left:var(--gap);
    }
    .nnsa {
        box-shadow:none!important;
    }
</style>
<div class="toc">
    <div class="topper">Other Parts in the Neural Networks Series &nbsp; ⬇️</div>
    <ul>
      <li><a class="nnsa" href="/posts/the-pieplatter-project">Introduction - The Pieplatter Project</a></li>
      <li><a class="nnsa" href="/posts/neural-networks-part-0-bits-and-brains">Part 0 - Bits and Brains?</a></li>
      <li><a class="nnsa" href="/posts/neural-networks-part-1-looking-at-layers">Part 1 - Looking at Layers</a></li>
      <li><a class="nnsa" href="/posts/neural-networks-part-2-neuron-code">Part 2 - Neuron Code</a></li>
      
    </ul>
</div>



]]></content:encoded>
    </item>
    
    <item>
      <title>Neural Networks Part 1: Looking at Layers</title>
      <link>https://olinjohnson.github.io/posts/neural-networks-part-1-looking-at-layers/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://olinjohnson.github.io/posts/neural-networks-part-1-looking-at-layers/</guid>
      <description>Modeling and understanding the function of neurons in a network</description>
      <content:encoded><![CDATA[<div style="background-color: var(--entry); margin-bottom:20px; margin-top:10px; padding:10px; border-radius: var(--radius)"><em>If you haven&rsquo;t already, it might be a good idea to go back and check out <a href="/posts/neural-networks-part-0-bits-and-brains">Part 0</a> before continuing on to part 1.</em></div>

<p>Alright – the first step in the process of coding a neural network from scratch is representing the different components of the network in code.</p>
<p>Since the individual neurons form the foundation of the network, I figured we&rsquo;d start with those.</p>
<h3 id="before-we-begin">Before we begin&hellip;</h3>
<p>It&rsquo;s important to realize that the network we create isn&rsquo;t just going to be a singular chain of neurons strung together one-by-one. Instead, we are going to have <em>layers</em> of neurons that interact with each other. Each neuron in each layer will act as an input to each neuron in the next layer, and so on.</p>
<p>This design is not only critical for the functionality of our network, but it will also reduce computation time.</p>
<p>For example, here&rsquo;s a model of the configuration of neurons (in layers) for a very simple network:</p>
<figure>
    <img loading="lazy" src="/posts/neural_networks_series/images/model1.png"
         alt="neural network model"/> 
</figure>



<div style="font-size:14px;">
<div style="background-color: var(--entry); margin-bottom:20px; margin-top:10px; padding:10px; border-radius: var(--radius)">Each circle/node in the network represents a neuron.</div>

</div>

<p>As you can see, there are three layers in this network (also three different types of layers) and six neurons in total.</p>
<p>Each neuron in the network represents a number: the value of that neuron. Each neuron also has other special values called weights and biases that help the network to propagate forward. I&rsquo;ll get to those later.</p>
<hr>
<p>I&rsquo;ll start with the input layer – aptly named, this is the layer of neurons which provide inputs to the network. As you can see, this network takes two inputs.</p>
<p>Realistically, these inputs could be anything: they could be 1s and 0s if the network is built to solve logic gates (like a logical XOR), or they could even be x and y values if the network is intended to predict the output of a mathematical function like sine or cosine.</p>
<p>But what about images? Like I said earlier, each neuron in the network can be boiled down to a numerical value, so to represent images, we generally have a lot of inputs that represent each individual pixel.</p>
<p>For example, if we wanted to input a 64x64 black-and-white image to the network, we would have 4096 inputs for each of the 4096 pixels. Each input would be a value between 0 and 1 to represent the brightness of the pixel it represents.</p>
<hr>
<p>Next, we have the hidden layer of the network, consisting of 3 neurons. Neural networks can generally have any number of hidden layers consisting of any number of neurons.</p>
<p>Hidden layers are essentially the &ldquo;logic and reasoning&rdquo; part of the network - they take the inputs, apply some kind of computation, and then output a value to the output layer.</p>
<p>For example, it&rsquo;s like baking bread.</p>
<figure>
    <img loading="lazy" src="/posts/neural_networks_series/images/bread.png"
         alt="Picture of bread"/> 
</figure>

<p>The input layer is equivalent to the dough, but the dough has to go in the oven before it becomes a real loaf of bread. Otherwise, it is just a collection of ingredients that have been whisked together.</p>
<p>The hidden layers act similarly. They take the input, mold it and shape it in some way (like the oven for the bread), and then produce an output. The important thing is that the programmer doesn&rsquo;t really know how the hidden layers are &ldquo;molding and shaping&rdquo; the inputs, because the computer learns by itself and creates its own special recipe to get the correct output given an input. It&rsquo;s like if you put the dough in the oven without knowing what it did and then a complete loaf of bread came out.</p>
<hr>
<p>Finally, the output layer takes the final product from the hidden layers and then outputs it. The output layer may or may not perform some kind of computation to shape the output, but it ultimately doesn&rsquo;t change the value of the output. This would be like slicing the bread after it comes out of the oven so it&rsquo;s ready to eat.</p>
<hr>
<p>So that&rsquo;s the basic theory behind how a neural network takes an input and produces an output. There are more intricacies to the layers of the network, and more specific operations to determine the exact values of neurons in the network, but I&rsquo;ll get into those next time, when we actually start laying out the network&rsquo;s code.</p>
<p><br>
<style>
    .toc {
        cursor: default;
        width:100%;
        padding-left:var(--gap);
        padding-right:var(--gap);
        padding-top:.6em;
    }
    .topper {
        border-bottom: 1px solid var(--primary);
        padding-bottom: .6em;
        padding-top: .2em;
    }
    ul {
        margin-top: .8em;
        margin-bottom: .8em!important;
        padding-left:var(--gap);
    }
    .nnsa {
        box-shadow:none!important;
    }
</style>
<div class="toc">
    <div class="topper">Other Parts in the Neural Networks Series &nbsp; ⬇️</div>
    <ul>
      <li><a class="nnsa" href="/posts/the-pieplatter-project">Introduction - The Pieplatter Project</a></li>
      <li><a class="nnsa" href="/posts/neural-networks-part-0-bits-and-brains">Part 0 - Bits and Brains?</a></li>
      <li><a class="nnsa" href="/posts/neural-networks-part-1-looking-at-layers">Part 1 - Looking at Layers</a></li>
      <li><a class="nnsa" href="/posts/neural-networks-part-2-neuron-code">Part 2 - Neuron Code</a></li>
      
    </ul>
</div>


</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Neural Networks Part 0: Bits and Brains?</title>
      <link>https://olinjohnson.github.io/posts/neural-networks-part-0-bits-and-brains/</link>
      <pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://olinjohnson.github.io/posts/neural-networks-part-0-bits-and-brains/</guid>
      <description>A conceptual overview of the theory behind neural networks</description>
      <content:encoded><![CDATA[<p>Recently, I&rsquo;ve been doing a lot of work learning about AI and neural networks – specifically by creating deep learning models from scratch. So, I thought I&rsquo;d document some of that learning in a multi-part series about deep learning.</p>
<p>In case you&rsquo;re not already familiar, neural networks are AI processes that are modeled after the human brain and can solve problems by simulating human methods of learning.</p>
<p>For example, in the same way that your brain has learned to differentiate between cats and dogs, we can also teach a neural network to classify types of pets (among other things).</p>
<h3 id="but-how-is-a-computer-able-to-learn-like-a-person">But how is a computer able to learn like a person?</h3>
<p>Well, let&rsquo;s first look at one of the most essential building blocks of the human brain:</p>
<figure>
    <img loading="lazy" src="/posts/neural_networks_series/images/neuron.jpg"
         alt="neuron image"/> <figcaption>
            <p style="font-style:italic">
                    <a href="https://www.simplypsychology.org/neuron.html">Image credit: simplypsychology.org</a></p>
        </figcaption>
</figure>

<p>As you can see, this is a model of a neuron. For our purposes, we&rsquo;ll mostly focus on the dendrites and axons of the neuron.</p>
<p>In your brain, neurons link together to form neuron chains, which propagate chemical signals from neuron to neuron. These chemical signals are what ultimately determine whether or not certain neurons fire.</p>
<p>In order to form these chains, the dendrites of one neuron connect to the axons of another (via axon terminals) over a space called a synapse. By connecting these ends, you can see how neurons can be strung together to form really long chain chains.</p>
<p>It&rsquo;s kind of like plugging extension cords into each other:</p>
<figure>
    <img loading="lazy" src="/posts/neural_networks_series/images/extension-cord-plugs.jpg"
         alt="extension chords"/> <figcaption>
            <p style="font-style:italic">
                    <a href="https://www.cloverelectric.com/choosing-the-right-extension-cord">Image credit: cloverelectric.com</a></p>
        </figcaption>
</figure>

<p>Using the extension cord example, it&rsquo;s easy to see how a lot of neurons could be connected together (billions of &rsquo;em) and how they can fire in succession based on chemical signals that travel through the neuron chains.</p>
<h3 id="ok-so">Ok, so?</h3>
<p>In essence, a neural network tries to simulate these complex chains of neurons to make decisions like a human would.</p>
<p>Computationally speaking, we can do this by representing neurons using code, and then simulating how neuron chains would fire to make a decision or judgment like a human brain.</p>
<p>Of course, this is just a brief overview of the philosophy behind neural networks and it barely even scratches the surface of their complexity. Look out for Part 1 where I&rsquo;ll go more in depth into the code required to create the foundation of a neural network.</p>
<p><br>
<style>
    .toc {
        cursor: default;
        width:100%;
        padding-left:var(--gap);
        padding-right:var(--gap);
        padding-top:.6em;
    }
    .topper {
        border-bottom: 1px solid var(--primary);
        padding-bottom: .6em;
        padding-top: .2em;
    }
    ul {
        margin-top: .8em;
        margin-bottom: .8em!important;
        padding-left:var(--gap);
    }
    .nnsa {
        box-shadow:none!important;
    }
</style>
<div class="toc">
    <div class="topper">Other Parts in the Neural Networks Series &nbsp; ⬇️</div>
    <ul>
      <li><a class="nnsa" href="/posts/the-pieplatter-project">Introduction - The Pieplatter Project</a></li>
      <li><a class="nnsa" href="/posts/neural-networks-part-0-bits-and-brains">Part 0 - Bits and Brains?</a></li>
      <li><a class="nnsa" href="/posts/neural-networks-part-1-looking-at-layers">Part 1 - Looking at Layers</a></li>
      <li><a class="nnsa" href="/posts/neural-networks-part-2-neuron-code">Part 2 - Neuron Code</a></li>
      
    </ul>
</div>


</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>The Pieplatter Project</title>
      <link>https://olinjohnson.github.io/posts/the-pieplatter-project/</link>
      <pubDate>Sat, 27 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://olinjohnson.github.io/posts/the-pieplatter-project/</guid>
      <description>An overview of a deep learning library I&amp;#39;ve been building from the ground up and an introduction to the upcoming neural networks series</description>
      <content:encoded><![CDATA[<p>Over the past month, what started as a school project has turned into a custom-built deep learning library called <a href="https://github.com/olinjohnson/pieplatter">pieplatter</a> that I&rsquo;ve been building from scratch. It&rsquo;s been quite the ordeal, and I thought I&rsquo;d document some of of the build process here.</p>
<p>I&rsquo;ve been working hard to put the library together and get some degree of functionality. As it currently stands, it&rsquo;s equipped to create small neural networks for simple problems, but I&rsquo;m still adding more support and optimizations so that hopefully much bigger and more powerful networks can be created in the future.</p>
<p>Right now, I still haven&rsquo;t put any docs together for the library, but I&rsquo;ll link those when I do. Until then, I wanted to put together a fairly large series of posts to document the entire process of coding a neural network from scratch. They&rsquo;ll run through all the theory, programming, and math so you can really get a good grasp on how neural networks work under the hood and how to create some simple networks from the ground up.</p>
<p>If you want, you can check out the first of many posts in the series <a href="/posts/neural-networks-part-0-bits-and-brains">here</a>.</p>
<p>You can also check out my deep learning library <a href="https://github.com/olinjohnson/pieplatter">here</a> on github. It&rsquo;s called <a href="https://github.com/olinjohnson/pieplatter">pieplatter</a>.</p>
<style>
    .toc {
        cursor: default;
        width:100%;
        padding-left:var(--gap);
        padding-right:var(--gap);
        padding-top:.6em;
    }
    .topper {
        border-bottom: 1px solid var(--primary);
        padding-bottom: .6em;
        padding-top: .2em;
    }
    ul {
        margin-top: .8em;
        margin-bottom: .8em!important;
        padding-left:var(--gap);
    }
    .nnsa {
        box-shadow:none!important;
    }
</style>
<div class="toc">
    <div class="topper">Other Parts in the Neural Networks Series &nbsp; ⬇️</div>
    <ul>
      <li><a class="nnsa" href="/posts/the-pieplatter-project">Introduction - The Pieplatter Project</a></li>
      <li><a class="nnsa" href="/posts/neural-networks-part-0-bits-and-brains">Part 0 - Bits and Brains?</a></li>
      <li><a class="nnsa" href="/posts/neural-networks-part-1-looking-at-layers">Part 1 - Looking at Layers</a></li>
      <li><a class="nnsa" href="/posts/neural-networks-part-2-neuron-code">Part 2 - Neuron Code</a></li>
      
    </ul>
</div>



]]></content:encoded>
    </item>
    
  </channel>
</rss>
