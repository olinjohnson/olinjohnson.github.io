[{"content":"If you haven\u0026rsquo;t already, it might be a good idea to go back and check out Part 0 before continuing on to part 1. Alright – the first step in the process of coding a neural network from scratch is representing the different components of the network in code.\nSince the individual neurons form the foundation of the network, I figured we\u0026rsquo;d start with those.\nBefore we begin\u0026hellip; It\u0026rsquo;s important to realize that the network we create isn\u0026rsquo;t just going to be a singular chain of neurons strung together one-by-one. Instead, we are going to have layers of neurons that interact with each other. Each neuron in each layer will act as an input to each neuron in the next layer, and so on.\nThis design is not only critical for the functionality of our network, but it will also reduce computation time.\nFor example, here\u0026rsquo;s a model of the configuration of neurons (in layers) for a very simple network:\n  Each circle/node in the network represents a neuron.  As you can see, there are three layers in this network (also three different types of layers) and six neurons in total.\nEach neuron in the network represents a number: the value of that neuron. Each neuron also has other special values called weights and biases that help the network to propagate forward. I\u0026rsquo;ll get to those later.\n I\u0026rsquo;ll start with the input layer – aptly named, this is the layer of neurons which provide inputs to the network. As you can see, this network takes two inputs.\nRealistically, these inputs could be anything: they could be 1s and 0s if the network is built to solve logic gates (like a logical XOR), or they could even be x and y values if the network is intended to predict the output of a mathematical function like sine or cosine.\nBut what about images? Like I said earlier, each neuron in the network can be boiled down to a numerical value, so to represent images, we generally have a lot of inputs that represent each individual pixel.\nFor example, if we wanted to input a 64x64 black-and-white image to the network, we would have 4096 inputs for each of the 4096 pixels. Each input would be a value between 0 and 1 to represent the brightness of the pixel it represents.\n Next, we have the hidden layer of the network, consisting of 3 neurons. Neural networks can generally have any number of hidden layers consisting of any number of neurons.\nHidden layers are essentially the \u0026ldquo;logic and reasoning\u0026rdquo; part of the network - they take the inputs, apply some kind of computation, and then output a value to the output layer.\nFor example, it\u0026rsquo;s like baking bread.\n  Image credit: artisanpassion.com\n  The input layer is equivalent to the dough, but the dough has to go in the oven before it becomes a real loaf of bread. Otherwise, it is just a collection of ingredients that have been whisked together.\nThe hidden layers act similarly. They take the input, mold it and shape it in some way (like the oven for the bread), and then produce an output. The important thing is that the programmer doesn\u0026rsquo;t really know how the hidden layers are \u0026ldquo;molding and shaping\u0026rdquo; the inputs, because the computer learns by itself and creates its own special recipe to get the correct output given an input. It\u0026rsquo;s like if you put the dough in the oven without knowing what it did and then a complete loaf of bread came out.\n Finally, the output layer takes the final product from the hidden layers and then outputs it. The output layer may or may not perform some kind of computation to shape the output, but it ultimately doesn\u0026rsquo;t change the value of the output. This would be like slicing the bread after it comes out of the oven so it\u0026rsquo;s ready to eat.\n So that\u0026rsquo;s the basic theory behind how a neural network takes an input and produces an output. There are more specific operations to determine the exact value of neurons in the network, but I\u0026rsquo;ll get into that next time, when we actually start laying out the network\u0026rsquo;s code.\n","permalink":"https://olinjohnson.github.io/posts/neural-networks-part-1-looking-at-layers/","summary":"If you haven\u0026rsquo;t already, it might be a good idea to go back and check out Part 0 before continuing on to part 1. Alright – the first step in the process of coding a neural network from scratch is representing the different components of the network in code.\nSince the individual neurons form the foundation of the network, I figured we\u0026rsquo;d start with those.\nBefore we begin\u0026hellip; It\u0026rsquo;s important to realize that the network we create isn\u0026rsquo;t just going to be a singular chain of neurons strung together one-by-one.","title":"Neural Networks Part 1: Looking at Layers"},{"content":"Recently, I\u0026rsquo;ve been doing a lot of work learning about AI and neural networks–specifically by creating deep learning models from scratch. So, I thought I\u0026rsquo;d document some of that learning in a multi-part series about deep learning.\nIn case you\u0026rsquo;re not already familiar, neural networks are AI processes that are modeled after the human brain and can solve problems by simulating human methods of learning.\nFor example, in the same way that your brain has learned to differentiate between cats and dogs, we can also teach a neural network to classify types of pets (among other things).\nBut how is a computer able to learn like a person? Well, let\u0026rsquo;s first look at one of the most essential building blocks of the human brain:\n  Image credit: simplypsychology.org\n  As you can see, this is a model of a neuron. For our purposes, we\u0026rsquo;ll mostly focus on the dendrites and axons of the neuron.\nIn your brain, neurons link together to form neuron chains, which propagate chemical signals from neuron to neuron. These chemical signals are what ultimately determine whether or not certain neurons fire.\nIn order to form these chains, the dendrites of one neuron connect to the axons of another (via axon terminals) over a space called a synapse. By connecting these ends, you can see how neurons can be strung together to form really long chain chains.\nIt\u0026rsquo;s kind of like plugging extension cords into each other:\n  Image credit: cloverelectric.com\n  Using the extension cord example, it\u0026rsquo;s easy to see how a lot of neurons could be connected together (billions of \u0026rsquo;em) and how they can fire in succession based on chemical signals that travel through the neuron chains.\nOk, so? In essence, a neural network tries to simulate these complex chains of neurons to make decisions like a human would.\nComputationally speaking, we can do this by representing neurons using code, and then simulating how neuron chains would fire to make a decision or judgment like a human brain.\nOf course, this is just a brief overview of the philosophy behind neural networks and it barely even scratches the surface of their complexity. Look out for Part 1 where I\u0026rsquo;ll go more in depth into the code required to create the foundation of a neural network.\n","permalink":"https://olinjohnson.github.io/posts/neural-networks-part-0-bits-and-brains/","summary":"Recently, I\u0026rsquo;ve been doing a lot of work learning about AI and neural networks–specifically by creating deep learning models from scratch. So, I thought I\u0026rsquo;d document some of that learning in a multi-part series about deep learning.\nIn case you\u0026rsquo;re not already familiar, neural networks are AI processes that are modeled after the human brain and can solve problems by simulating human methods of learning.\nFor example, in the same way that your brain has learned to differentiate between cats and dogs, we can also teach a neural network to classify types of pets (among other things).","title":"Neural Networks Part 0: Bits and Brains?"},{"content":"I\u0026rsquo;ve recently been working on creating AIs for games like chess and othello, and I\u0026rsquo;ve been putting a lot of thought into the move generation functions and search algorithms of these AIs. Since these components are run so many times, it\u0026rsquo;s important to make sure that they are very efficient so they don\u0026rsquo;t slow down the computer too much and impact the AIs performance.\nFortunately, I was able to implement few huge optimizations that drastically reduced the running time of my AI, which included a change in how the board is represented.\nIt turns out that instead of representing the positions of pieces on the game board with something like a 2d array, there’s a much more efficient data structure we can use: a bitboard.\nActually, multiple bitboards.\nWhat I realized is that it\u0026rsquo;s much more efficient to represent the board simply as a collection of large numbers, instead of multi-dimensional arrays or some other complex structure.\nIn practice, what I mean by this is that we can take a 64 bit integer, called a bitboard, and assign each bit to a corresponding tile on a board like a chess board. By doing this, we can essentially store the board configuration using an integer, which takes up way less space in your computer\u0026rsquo;s memory than something like an array. Bitboards also have a couple other incredible advantages that I\u0026rsquo;ll dive into in a bit.\nFor example, In the game Othello, we might have 2 bitboards – 1 to represent the position of black pieces on the board and another for the white pieces. Each “on” bit, or 1, in a bitboard represents an occupied tile where a player’s piece is. Each “off” bit, or 0, represents an empty tile. This is why we have a bitboard for both black and white, to distinguish between each player’s pieces.\nDefining a bitboard in C# can be as simple as declaring an unsigned (non-negative) long integer.\nulong bitboard = 0; In a game like Othello, we can also create a class for the game board with attributes to hold the bitboards for black and white.\nclass Board { ulong white_pieces = 0; ulong black_pieces = 0; public Board() { white_pieces = 0x1008000000; black_pieces = 0x810000000; } } Now, if we initialize a new Board, it will give us the starting position for an Othello game.\nYou can see that if you convert the values for white_pieces and black_pieces from hexadecimal to binary, the activated bits in each bitboard will line up with the positions of the pieces on the board.\nulong white_pieces = 0x1008000000; /* *\t0x1008000000 = 0000000000000000000000000001000000001000000000000000000000000000 * *\t0 0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 0 *\t0 0 0 1 0 0 0 0 *\t0 0 0 0 1 0 0 0 *\t0 0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 0 */ ulong black_pieces = 0x810000000; /* *\t0x810000000 = 0000000000000000000000000000100000010000000000000000000000000000 * *\t0 0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 0 *\t0 0 0 0 1 0 0 0 *\t0 0 0 1 0 0 0 0 *\t0 0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 0 */ Why use bitboards? Well, I can assure you, though bitboards seem like a lot of hassle initially, they are well worth it for their performance benefits.\nThe primary reason why bitboards are so computationally efficient is because you can utilize bitwise operators to speed up calculation and eleminate conditionals.\nHere\u0026rsquo;s an example:\n In the game connect 4, in order to detect a win, we need to evaluate if either player has 4 in a row.\nWe can start by initializing two bitboards, one to keep track of the red player’s pieces and another to keep track of the yellow player’s pieces. Since a connect 4 board is smaller (only 42 tiles), we only need 42 bits to represent the board. So, we’ll assign each of the first 42 bits to a position on the board.\nulong red_pieces = 0; ulong yellow_pieces = 0; Now let’s assume the following board position:\nAs you can see in the above screenshot, yellow has won the game by placing 4 of their pieces vertically in a row.\nUsing a bitboard, we can check for a vertical win (in just 3 lines of code!) by utilizing the bitwise AND and bitshift operators as follows:\n// Step 1: ulong pairs = yellow_pieces \u0026amp; (yellow_pieces \u0026lt;\u0026lt; 1); // Step 2: ulong quads = pairs \u0026amp; (pairs \u0026lt;\u0026lt; 2); // Step 3 – returning the result from steps 1 and 2: return quads \u0026gt; 0 1. First of all, we start by initializing a new bitboard, called pairs.\nThe goal of this bitboard is to store all of the vertical pairs of yellow coins, all the 2-in-a-row combinations.\nTo do this, we first bitshift all the yellow pieces left 1 bit – the upwards direction.\nAs you can see, bit 19 gets shifted to bit 20, bit 20 gets shifted to bit 21, bit 21 gets shifted to bit 22, and bit 22 gets shifted to bit 23.\nNow that we have shifted all of the pieces up by 1 tile, we record which pieces align with the initial yellow pieces. If they do align, then we have found 2 in a row.\nWe can do this by using the bitwise AND operator.\n/* *\t0 0 0 0 0 0 0\t0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0\t0 0 0 1 0 0 0 *\t0 0 0 1 0 0 0\t0 0 0 1 0 0 0 *\t0 0 0 1 0 0 0\t\u0026amp;\t0 0 0 1 0 0 0 *\t0 0 0 1 0 0 0\t0 0 0 1 0 0 0 *\t0 0 0 1 0 0 0\t0 0 0 0 0 0 0 */ // 000000000000000000001111000000000000000000 \u0026amp; 000000000000000000011110000000000000000000 Bits 20, 21, and 22 are activated on both bitboards, so when we AND them together, those are the bits that will be left on.\n/* *\t0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 *\t0 0 0 1 0 0 0 *\t0 0 0 1 0 0 0 *\t0 0 0 1 0 0 0 *\t0 0 0 0 0 0 0 */ // 000000000000000000001110000000000000000000 Since there are three activated bits, we can see that there were three pairs of vertical yellow pieces.\n2. Next, we’ll repeat the whole process again to find 4 in a row – with a slight tweak.\nThis time, we’re going to calculate a bitboard called quads – we’ll take the bitboard pairs that we just calculated and bitshift it left 2 bits. This is to find “pairs of pairs”, or 4 in a row.\n// 000000000000000000001110000000000000000000 \u0026lt;\u0026lt; 2 /* * Result: * *\t0 0 0 1 0 0 0 *\t0 0 0 1 0 0 0 *\t0 0 0 1 0 0 0 *\t0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 */ // 000000000000000000111000000000000000000000 Finally, we’ll AND the result with pairs . If there are any bits left on after this operation, we’ll know we have found four in a row.\n/* *\t0 0 0 1 0 0 0\t0 0 0 0 0 0 0 *\t0 0 0 1 0 0 0\t0 0 0 0 0 0 0 *\t0 0 0 1 0 0 0\t0 0 0 1 0 0 0 *\t0 0 0 0 0 0 0\t\u0026amp;\t0 0 0 1 0 0 0 *\t0 0 0 0 0 0 0\t0 0 0 1 0 0 0 *\t0 0 0 0 0 0 0\t0 0 0 0 0 0 0 */ // 000000000000000000111000000000000000000000 \u0026amp; 000000000000000000001110000000000000000000 Result:\n/* *\t0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 *\t0 0 0 1 0 0 0 *\t0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 */ // 000000000000000000001000000000000000000000 1 bit (that corresponds to the topmost yellow piece) has been left activated - this means that we have found four in a row.\n3. If no bits have been left activated, the value of quads will be 0, which is why we return true if quads is bigger than 1 - to signify a win.\nTo calculate four in a row in other directions too, we can just change the amount bitshifted. For example, we could calculate horizontal wins by bitshifting 6 bits to the left, instead of 1.\n As you can see, using bitboards, we are able to calculate wins in connect 4 (and many other applications) without the use of many conditionals and using very low-level operations. This makes bitboards remarkably fast – good for an AI that needs to check for wins millions of times.\nYou can imagine how bitboards can also be applied to more complex games like chess, where you\u0026rsquo;d have a bitboard for each type of piece and color (i.e. A bitboard for white knights).\nCheck out my full Connect 4 AIand Othello AI.\n","permalink":"https://olinjohnson.github.io/posts/optimizing-chess-othello-and-connect-4-with-bitboards/","summary":"I\u0026rsquo;ve recently been working on creating AIs for games like chess and othello, and I\u0026rsquo;ve been putting a lot of thought into the move generation functions and search algorithms of these AIs. Since these components are run so many times, it\u0026rsquo;s important to make sure that they are very efficient so they don\u0026rsquo;t slow down the computer too much and impact the AIs performance.\nFortunately, I was able to implement few huge optimizations that drastically reduced the running time of my AI, which included a change in how the board is represented.","title":"Optimizations Using Bitboards"},{"content":"For a long time now, I\u0026rsquo;ve always found it a little bit weird that in Minecraft, only the person who gets the last swipe on the ender dragon actually earns the advancement \u0026ldquo;Free the End\u0026rdquo;.\nSo, after a suggestion from a friend, I decided to code a little plugin that would grant the advancement to every player who was involved with the fight.\nCoding the Plugin Before starting, you\u0026rsquo;ll have to install a fantastic IntelliJ plugin called Minecraft Development, which will set up our project architecture very easily for us.\nWith the plugin installed, I fired up IntelliJ and created a new project. Then I selected \u0026ldquo;minecraft\u0026rdquo;, then \u0026ldquo;spigot plugin\u0026rdquo;, so the plugin would work on my spigot server.\nAfter that, you\u0026rsquo;ll need to enter a GroupId and ArtifactId.\nFirstly, your GroupId should be your domain name backwards. So, if you have an actual domain name, you can enter it like com.yourdomainname (if it ends with .com). However, if you don\u0026rsquo;t have a domain name, you can always use your github pages subdomain. For example, my GroupId was io.github.olinjohnson.\nThen, your ArtifactId should be whatever the name of your plugin is going to be.\nAfter that, you\u0026rsquo;ll have the option to enter some additional (but not required) information, then you can click Next again, name you project, and click Create.\nFinally, IntelliJ will open a window for you to begin developing your plugin.\nIn the project\u0026rsquo;s file architecture, there is a directory called src. Inside src -\u0026gt; main -\u0026gt; java there will be a java package with the title yourGroupId.yourArtifactId. Inside this package is where the core class for the project is. If we open up the java class, we can see a couple important methods.\npackage io.github.olinjohnson.fenderender; import org.bukkit.plugin.java.JavaPlugin; public final class FenderEnder extends JavaPlugin { @Override public void onEnable(){ } @Override public void onDisable() } } The onEnable() method is called when the plugin is loaded, and onDisable is called when the plugin is terminated.\nFor now, we\u0026rsquo;re going to leave these two methods alone and create a new class inside the package called EnderDragonController.\nMy original thought process for creating this plugin was that the plugin should start by containing an event listener for whenever any entity dies. Then, it should check if the recently deceased entity is the ender dragon. If so, then it should award the \u0026ldquo;Free the End\u0026rdquo; advancement to any player in the end dimension.\nSo, lets begin by creating the event listener. We\u0026rsquo;ll want our class EnderDragonController to implement the Bukkit Listener class.\npackage io.github.olinjohnson.fenderender; import org.bukkit.Bukkit; import org.bukkit.event.Listener; public class EnderDragonController implements Listener { } Then, we\u0026rsquo;ll create a method to listen for an entity death events.\npackage io.github.olinjohnson.fenderender; import org.bukkit.Bukkit; import org.bukkit.event.Listener; import org.bukkit.event.EventHandler; import org.bukkit.event.entity.EntityDeathEvent; public class EnderDragonController implements Listener { @EventHandler public void onEnderDragonDeath(EntityDeathEvent event){ } } However, right now, this method is called whenever any entity dies. We only want it to run when the ender dragon dies. So, we\u0026rsquo;ll add a check to see if it was the ender dragon that died.\npackage io.github.olinjohnson.fenderender; import org.bukkit.Bukkit; import org.bukkit.event.Listener; import org.bukkit.event.EventHandler; import org.bukkit.event.entity.EntityDeathEvent; import org.bukkit.entity.Entity; import org.bukkit.entity.EnderDragon; public class EnderDragonController implements Listener { @EventHandler public void onEnderDragonDeath(EntityDeathEvent event){ Entity entity = event.getEntity(); if(entity instanceof EnderDragon){ } } } In the code, we can use the instanceof keyword to compare the entity in question and check if it is the ender dragon. This checks to see if the entity is an instance of the EnderDragon class.\nNow that we\u0026rsquo;ve detected the death of the ender dragon, we need to reward all players in the end dimension with the advancement. We\u0026rsquo;ll start by retrieving a list of all the online players with Bukkit.getOnlinePlayers(). This returns a Java collection, which we can iterate over in a for loop.\npackage io.github.olinjohnson.fenderender; import org.bukkit.Bukkit; import org.bukkit.event.Listener; import org.bukkit.event.EventHandler; import org.bukkit.event.entity.EntityDeathEvent; import org.bukkit.entity.Entity; import org.bukkit.entity.EnderDragon; import org.bukkit.entity.Player; public class EnderDragonController implements Listener { @EventHandler public void onEnderDragonDeath(EntityDeathEvent event){ Entity entity = event.getEntity(); if(entity instanceof EnderDragon){ for(Player p: Bukkit.getOnlinePlayers()){ } } } } Then, we\u0026rsquo;ll add a check to see which players in the collection are in the end dimension.\npackage io.github.olinjohnson.fenderender; import org.bukkit.Bukkit; import org.bukkit.event.Listener; import org.bukkit.event.EventHandler; import org.bukkit.event.entity.EntityDeathEvent; import org.bukkit.entity.Entity; import org.bukkit.entity.EnderDragon; import org.bukkit.World; public class EnderDragonController implements Listener { @EventHandler public void onEnderDragonDeath(EntityDeathEvent event){ Entity entity = event.getEntity(); if(entity instanceof EnderDragon){ for(Player p: Bukkit.getOnlinePlayers()){ if(p.getWorld().getEnvironment() == World.Environment.THE_END){ } } } } } Finally, now that we\u0026rsquo;ve compiled a collection of players who were in the end while the ender dragon was killed, we need to reward them all with the advancement \u0026ldquo;Free the End\u0026rdquo;.\nWe\u0026rsquo;ll start by storing a reference to the advancement name in an instance of Bukkit\u0026rsquo;s NamespacedKey class. Then, we\u0026rsquo;ll get a reference to the player\u0026rsquo;s progress towards the advancement.\n// Reference to the advancement name NamespacedKey key = NamespacedKey.minecraft(\u0026#34;end/kill_dragon\u0026#34;); // Get the player\u0026#39;s current progress AdvancementProgress progress = p.getAdvancementProgress(Bukkit.getAdvancement(key)); Then, we\u0026rsquo;ll evaluate every remaining criteria that a player has to complete to fulfill this advancement. We\u0026rsquo;ll update any incomplete criteria to be complete.\n// Reference to the advancement name NamespacedKey key = NamespacedKey.minecraft(\u0026#34;end/kill_dragon\u0026#34;); // Get the player\u0026#39;s current progress AdvancementProgress progress = p.getAdvancementProgress(Bukkit.getAdvancement(key)); // Iterate over remaining criteria for(String stuff_left: progress.getRemainingCriteria()){ // Grant progress towards the advancement progress.awardCriteria(left); } This will award a player with the advancement.\nFinally, all your code in the EnderDragonController class should look similar to this:\npackage io.github.olinjohnson.fenderender; import org.bukkit.Bukkit; import org.bukkit.event.Listener; import org.bukkit.event.EventHandler; import org.bukkit.event.entity.EntityDeathEvent; import org.bukkit.entity.Entity; import org.bukkit.entity.EnderDragon; import org.bukkit.entity.Player; import org.bukkit.World; import org.bukkit.NamespacedKey; import org.bukkit.advancement.AdvancementProgress; public class EnderDragonController implements Listener { @EventHandler public void onEnderDragonDeath(EntityDeathEvent event){ Entity entity = event.getEntity(); if(entity instanceof EnderDragon){ for(Player p: Bukkit.getOnlinePlayers()){ if(p.getWorld().getEnvironment() == World.Environment.THE_END){ NamespacedKey key = NamespacedKey.minecraft(\u0026#34;end/kill_dragon\u0026#34;); AdvancementProgress progress = p.getAdvancementProgress(Bukkit.getAdvancement(key)); for(String stuff_left: progress.getRemainingCriteria()){ progress.awardCriteria(stuff_left); } } } } } } Alright! We\u0026rsquo;re almost done. Just one more small thing to do.\nNavigate back to your core class, the one with the same name as the title of your project.\nIn the onEnable() method, we need to initialize our EnderDragonController class, so it knows to actually listen for events.\npackage io.github.olinjohnson.fenderender; import org.bukkit.plugin.java.JavaPlugin; public final class FenderEnder extends JavaPlugin { @Override public void onEnable() { getServer().getPluginManager().registerEvents(new EnderDragonController(), this); } @Override public void onDisable() {} } Now we\u0026rsquo;re done!\nYou can package your plugin into a jar file by selecting Build -\u0026gt; Build Project, using CTRL + F9, or by running mvn package from the root level of your project.\nThis will create a jar file in your project\u0026rsquo;s target directory, which you can then import into your server\u0026rsquo;s plugins directory to see it in action!\nThe final code for this project can be viewed here on GitHub.\n","permalink":"https://olinjohnson.github.io/posts/code-for-an-ender-dragon-conquistador/","summary":"For a long time now, I\u0026rsquo;ve always found it a little bit weird that in Minecraft, only the person who gets the last swipe on the ender dragon actually earns the advancement \u0026ldquo;Free the End\u0026rdquo;.\nSo, after a suggestion from a friend, I decided to code a little plugin that would grant the advancement to every player who was involved with the fight.\nCoding the Plugin Before starting, you\u0026rsquo;ll have to install a fantastic IntelliJ plugin called Minecraft Development, which will set up our project architecture very easily for us.","title":"Code for an Ender Dragon Conquistador"},{"content":"Hello, world!\n","permalink":"https://olinjohnson.github.io/posts/my-first-post/","summary":"Hello, world!","title":"My First Post"},{"content":"Howdy, I\u0026rsquo;m Olin! I’m a web developer, AI enthusiast, and cybersecurity aficionado.\nA few things I like to do\u0026hellip;  I love coding - especially AI. I like CTFs. I started doing CTFs a while ago while on a mission to learn more about cybersecurity. I like making music. I like running and skiing.  A few projects I\u0026rsquo;ve completed\u0026hellip;  Othello clone with AI Connect 4 clone with AI Sudoku solver \u0026amp; generator Minesweeper clone 2048 clone   Contributed to numpy Contributed to matplotlib  What I\u0026rsquo;m currently working on\u0026hellip;  A mediocre chess engine A custom machine learning framework Open source projects  📫 How to reach me: nervy.panoply.0w@icloud.com\n","permalink":"https://olinjohnson.github.io/about/","summary":"Howdy, I\u0026rsquo;m Olin! I’m a web developer, AI enthusiast, and cybersecurity aficionado.\nA few things I like to do\u0026hellip;  I love coding - especially AI. I like CTFs. I started doing CTFs a while ago while on a mission to learn more about cybersecurity. I like making music. I like running and skiing.  A few projects I\u0026rsquo;ve completed\u0026hellip;  Othello clone with AI Connect 4 clone with AI Sudoku solver \u0026amp; generator Minesweeper clone 2048 clone   Contributed to numpy Contributed to matplotlib  What I\u0026rsquo;m currently working on\u0026hellip;  A mediocre chess engine A custom machine learning framework Open source projects  📫 How to reach me: nervy.","title":"About"},{"content":"","permalink":"https://olinjohnson.github.io/projects/","summary":"","title":"Past Projects"}]