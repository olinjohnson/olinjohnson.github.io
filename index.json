[{"content":"If you haven\u0026rsquo;t been following along with the previous posts in this neural networks series, I highly recommend reading those before continuing forward. At this point in the series, we\u0026rsquo;ve talked about layers, and we\u0026rsquo;ve talked about coding neurons. Now, we\u0026rsquo;re going to scale up the neuron code to be applicable for layers of the network, to make it more customizable and functional.\nWhy are we doing this? The reason we can\u0026rsquo;t just take the neuron code from Part 2 and move forward is because it isn\u0026rsquo;t really practical in the context of our network. If you recall, we created a class for each neuron in the network, but with neural networks getting increasingly large (most networks have thousands to millions of neurons), it\u0026rsquo;s simply too tedious and too slow to instantiate a new instance of the class for each neuron in the network. That approach might be manageable for the simple 6-neuron example network I presented, but it won\u0026rsquo;t be realistic for larger-scale networks with practical functionality.\nThus, we need to scale our neuron code to work with layers in our network.\nWhat are we going to do instead? Well, instead of having a class for each neuron in the network, it would be more realistic to define a class that represents each layer in the network.\nRemember, networks can have any number of hidden layers, so by creating a class to represent network layers, we can make our network functional, practical, and scalable.\nAlright, how is this going to work? Well, in order to move forward, we\u0026rsquo;re going to need to change up how we\u0026rsquo;ve been thinking. We\u0026rsquo;ll need to start using matrices to describe things like weights and biases.\nFor example, consider the following model:\nNotice how each neuron has 2 weights. Remember that each weight is just a number, so we can give each neuron its own weight vector to keep track of them.\nFor example, the weight vector of the neuron \\(y_1\\) would be\n$$\\begin{bmatrix}w_2 \u0026amp; w_3\\end{bmatrix}$$\nBecause those are the weights that connect the neuron to its inputs.\nFortunately, since each neuron only has 1 bias, we don\u0026rsquo;t need to use a vector to represent the bias. We can reference the neuron\u0026rsquo;s bias using the notation \\(b_n\\), where \\(n\\) is the corresponding numbered neuron.\n Writing the Layer class Now that we\u0026rsquo;ve covered how to represent the neurons\u0026rsquo; weights and biases (you\u0026rsquo;ll see why in a minute), we can start writing the code for the Layer class. We\u0026rsquo;ll start by declaring a very basic constructor method:\nclass Layer:  def __init__(self, num_inputs, num_neurons):  # ... You\u0026rsquo;ll notice that the class takes two arguments: num_inputs, for the number of input neurons, and num_neurons, for the number of neurons in the layer.\nWe need num_inputs to define the right number of weights per neuron in the layer, and we need num_neurons to know the right number of neurons that we need to define weights for.\nThe reason we need these parameters is to create a weight matrix. This is essentially a vector of all the neurons\u0026rsquo; weights. For instance, since each neuron\u0026rsquo;s weights are represented by a vector, to represent the weights of all the neurons in the layer, we would need a vector of those vectors, or a matrix.\nFor example, the weight matrix of the model from above would be:\n$$ \\begin{bmatrix} w_0 \u0026amp; w_1 \\\\ w_2 \u0026amp; w_3 \\\\ w_4 \u0026amp; w_5 \\end{bmatrix} $$\nYou can see how each row in the matrix represents a neuron, and each column represents one of the neuron\u0026rsquo;s weights. Thus, the number of rows in the matrix is equal to the number of neurons, and the number of columns is equal to the number of weights per neuron, which is equal to the total number of inputs.\nMaking sense?\nSo, now we can randomly initialize all the weights for our neurons at once by creating a matrix with dimensions num_neurons * num_inputs. Check out the following code:\nclass Layer:  def __init__(self, num_inputs, num_neurons):  self.weights = np.random.randn(num_neurons, num_inputs)  # ... Note: np.random.randn() is a numpy function that returns samples from a standard normal distribution. By passing matrix dimensions as arguments, the function is able to populate an entire matrix with random values. You can view the documentation for np.random.randn() here.  We can do something similar with the biases, though we only need a vector to hold all the biases for the layer because each neuron only has one bias.\nclass Layer:  def __init__(self, num_inputs, num_neurons):  self.weights = np.random.randn(num_neurons, num_inputs)  self.biases = np.random.randn(num_neurons) Calculating neuron values (and code!) By representing weights, inputs, and biases using matrices like above, we can speed up the network significantly and calculate the values of every neuron at once, instead of individually like we were doing in part 2.\nTo do this, we can find the dot product of the inputs and weights.\n$$ X = I * W + B $$\nNote: in the future, I\u0026rsquo;ll write a more in-depth post on what a dot product is, how to compute a dot product, and their application in neural networks, but for now, I think the mathisfun guide does a pretty good job explaining. We can represent this in code by defining a method to our Layer class that returns the dot product of its inputs and weights (and adds the biases) using the numpy function np.dot().\nclass Layer:  def __init__(self, num_inputs, num_neurons):  self.weights = np.random.randn(num_neurons, num_inputs)  self.biases = np.random.randn(num_neurons)  def calc_neuron_outputs(self, inputs):  # assert len(inputs) == len(biases)  return np.dot(inputs, self.weights) + self.biases As you can see, the method Layer.calc_neuron_outputs() takes a number of inputs (one for each neuron in the layer) and returns a matrix with all the output values of the neurons by computing the dot product of the inputs and weights, and then adding the biases.\nThat\u0026rsquo;s as far as I\u0026rsquo;ll go for now, but keep an eye out for future posts where we\u0026rsquo;ll dig a little deeper into dot products, batches of inputs, and activation functions.\n .toc { cursor: default; width:100%; padding-left:var(--gap); padding-right:var(--gap); padding-top:.6em; } .topper { border-bottom: 1px solid var(--primary); padding-bottom: .6em; padding-top: .2em; } ul { margin-top: .8em; margin-bottom: .8em!important; padding-left:var(--gap); } .nnsa { box-shadow:none!important; }  Other Parts in the Neural Networks Series \u0026nbsp; ⬇️  Introduction - The Pieplatter Project Part 0 - Bits and Brains? Part 1 - Looking at Layers Part 2 - Neuron Code Part 3 - Neurons to Layers   ","permalink":"https://olinjohnson.github.io/posts/neural-networks-part-3-neurons-to-layers/","summary":"If you haven\u0026rsquo;t been following along with the previous posts in this neural networks series, I highly recommend reading those before continuing forward. At this point in the series, we\u0026rsquo;ve talked about layers, and we\u0026rsquo;ve talked about coding neurons. Now, we\u0026rsquo;re going to scale up the neuron code to be applicable for layers of the network, to make it more customizable and functional.\nWhy are we doing this? The reason we can\u0026rsquo;t just take the neuron code from Part 2 and move forward is because it isn\u0026rsquo;t really practical in the context of our network.","title":"Neural Networks Part 3: Neurons to Layers"},{"content":"If you haven\u0026rsquo;t been following along with the previous posts in this neural networks series, I highly recommend reading those before continuing forward. At this point in the series, I\u0026rsquo;ve laid out the general concept for how neural networks are composed and how they can utilize interconnected layers of neurons to make predictions. In this post, we\u0026rsquo;ll check out how to compute the exact values of neurons and begin to lay down some code for a simple neural net.\nA few notes about neurons Before we dive into computing the values of neurons, there are a couple other important components that I\u0026rsquo;ve left out until now: weights and biases.\nFirst, we\u0026rsquo;ll start with weights. A neuron\u0026rsquo;s weight is a number that represents the strength of the neuron\u0026rsquo;s connection to its input.\nHere\u0026rsquo;s a model: As you can see, there\u0026rsquo;s one neuron (the red circle) connected to an input neuron. The line between them (\\(w_0\\)) represents the neuron\u0026rsquo;s weight.\nLike I said before, the weight is a relatively low number that represents the strength of the connection between a neuron and it\u0026rsquo;s inputs. More generally, a neuron\u0026rsquo;s weight is a measure of how much its input influences its output.\n Secondly, we\u0026rsquo;ll talk about the bias.\nThough I\u0026rsquo;ve chosen to represent the bias with a filled green circle (\\(b_0\\)) in the example image above, the bias is not a neuron, nor is the connection between the bias and the neuron a weight. Instead, a neuron\u0026rsquo;s bias is just a constant value that is used to offset the neuron\u0026rsquo;s output during computation. It\u0026rsquo;s similar to the variable \\(b\\) for the linear function \\(y=mx+b\\), and it\u0026rsquo;s used to adjust the barriers of the neuron\u0026rsquo;s output. The purpose of the bias will become more clear after we get into computing and programming neurons.\n Calculating the value of a neuron As you can see in the graphic, there is a fairly simple formula to compute the value of a neuron:\n$$ y = input * weight + bias $$\nThe input is represented in the graphic by the value \\(x_0\\), the weight is represented by the value \\(w_0\\), and the bias is represented by the value \\(b_0\\).\nTo find the neuron\u0026rsquo;s value, we just multiply the neuron\u0026rsquo;s input and weight together (\\(x_0 * w_0\\)) and then add the bias (\\(x_0 * w_0 + b_0\\)).\nBreaking it down, we can easily recognize the functions of the weights and biases that I talked about earlier.\nRemember when I said:\n a neuron\u0026rsquo;s weight is a measure of how much its input influences its output\n    That\u0026rsquo;s why we multiply the weight by the input - because it effectively has the power to scale our input up and down.\nAnd remember this?  a neuron\u0026rsquo;s bias is just a constant value that is used to offset the neuron\u0026rsquo;s output during computation\n    That\u0026rsquo;s why we add the \\(b\\) value at the end - because it shifts the entire value of the neuron up or down.\nBut what if a neuron has multiple inputs? Think back to the following model from Part 1:\nAs you can see, all of the neurons in the hidden layer have two inputs, not just one. You\u0026rsquo;ll also notice that they each have two weights as well, that correspond to the two inputs.\nSo, to calculate the value of a neuron with multiple inputs, we multiply each of its inputs by their respective weights, get the sum, and then add the bias.\nThe formula looks like this, where \\(n\\) is the total number of inputs to a neuron:\n$$ y=b+\\sum^{n}_{i=0}x_i * w_i $$\nFor example, take the following neuron with 2 inputs and 2 weights:\nNote: the bias isn\u0026rsquo;t always represented in the model - it\u0026rsquo;s presence is assumed Like I said before, in order to calculate a neuron\u0026rsquo;s value with multiple inputs, we multiply each input by its respective weight, sum them up, and then add the bias.\nSo to calculate the value of the green neuron, we need to do:\n$$ x_0 * w_0 + x_1 * w_1 + b $$\n Coding a neuron Alright - now that we\u0026rsquo;ve finally gotten through most of the basics for understanding how a neural network functions, we can start representing some of it with code. We\u0026rsquo;ll start very lightly by understanding how to represent a neuron and its components in code.\nI\u0026rsquo;ll do most of the coding in this series in python, but if you\u0026rsquo;re familiar with other programming languages, all the same concepts will still apply. To represent a neuron in code, we could start by creating a class that holds the neuron\u0026rsquo;s components - mainly the neuron\u0026rsquo;s weights and its bias.\nclass Neuron:  def __init__(self, num_inputs):  # initialize self.weights  # initialize self.bias You can see in the constructor method that the class will take the number of inputs (num_inputs) as an argument - this is because the number of weights that we initialize depends on the number of inputs (one weight for every input).\nFor now, we\u0026rsquo;ll start by initializing the weights and bias randomly.\nimport numpy as np class Neuron:  def __init__(self, num_inputs):  self.weights = np.random.randn(num_inputs)  self.bias = np.random.randn() We can also add a method to calculate the neuron\u0026rsquo;s value by multiplying its weights and inputs together. We\u0026rsquo;ll use a dot product for this. If you\u0026rsquo;re unsure about how dot products work, don\u0026rsquo;t worry - I\u0026rsquo;ll explain them more thoroughly in the next post.\nimport numpy as np class Neuron:  def __init__(self, num_inputs):  self.weights = np.random.randn(num_inputs)  self.bias = np.random.randn()   def calculate(self, inputs):  return np.dot(inputs, self.weights.T) + self.bias You\u0026rsquo;ll see the limitations of some of this code as we get more in-depth in the following chapters of the series, but for now, this is a good start for representing a neuron.\nKeep an eye out for the next post where we\u0026rsquo;ll take a deeper dive into neuron code and representing neurons in the context of layers.\n .toc { cursor: default; width:100%; padding-left:var(--gap); padding-right:var(--gap); padding-top:.6em; } .topper { border-bottom: 1px solid var(--primary); padding-bottom: .6em; padding-top: .2em; } ul { margin-top: .8em; margin-bottom: .8em!important; padding-left:var(--gap); } .nnsa { box-shadow:none!important; }  Other Parts in the Neural Networks Series \u0026nbsp; ⬇️  Introduction - The Pieplatter Project Part 0 - Bits and Brains? Part 1 - Looking at Layers Part 2 - Neuron Code Part 3 - Neurons to Layers   ","permalink":"https://olinjohnson.github.io/posts/neural-networks-part-2-neuron-code/","summary":"If you haven\u0026rsquo;t been following along with the previous posts in this neural networks series, I highly recommend reading those before continuing forward. At this point in the series, I\u0026rsquo;ve laid out the general concept for how neural networks are composed and how they can utilize interconnected layers of neurons to make predictions. In this post, we\u0026rsquo;ll check out how to compute the exact values of neurons and begin to lay down some code for a simple neural net.","title":"Neural Networks Part 2: Neuron Code"},{"content":"If you haven\u0026rsquo;t already, it might be a good idea to go back and check out Part 0 before continuing on to part 1. Alright – the first step in the process of coding a neural network from scratch is representing the different components of the network in code.\nSince the individual neurons form the foundation of the network, I figured we\u0026rsquo;d start with those.\nBefore we begin\u0026hellip; It\u0026rsquo;s important to realize that the network we create isn\u0026rsquo;t just going to be a singular chain of neurons strung together one-by-one. Instead, we are going to have layers of neurons that interact with each other. Each neuron in each layer will act as an input to each neuron in the next layer, and so on.\nThis design is not only critical for the functionality of our network, but it will also reduce computation time.\nFor example, here\u0026rsquo;s a model of the configuration of neurons (in layers) for a very simple network:\n  Each circle/node in the network represents a neuron.  As you can see, there are three layers in this network (also three different types of layers) and six neurons in total.\nEach neuron in the network represents a number: the value of that neuron. Each neuron also has other special values called weights and biases that help the network to propagate forward. I\u0026rsquo;ll get to those later.\n I\u0026rsquo;ll start with the input layer – aptly named, this is the layer of neurons which provide inputs to the network. As you can see, this network takes two inputs.\nRealistically, these inputs could be anything: they could be 1s and 0s if the network is built to solve logic gates (like a logical XOR), or they could even be x and y values if the network is intended to predict the output of a mathematical function like sine or cosine.\nBut what about images? Like I said earlier, each neuron in the network can be boiled down to a numerical value, so to represent images, we generally have a lot of inputs that represent each individual pixel.\nFor example, if we wanted to input a 64x64 black-and-white image to the network, we would have 4096 inputs for each of the 4096 pixels. Each input would be a value between 0 and 1 to represent the brightness of the pixel it represents.\n Next, we have the hidden layer of the network, consisting of 3 neurons. Neural networks can generally have any number of hidden layers consisting of any number of neurons.\nHidden layers are essentially the \u0026ldquo;logic and reasoning\u0026rdquo; part of the network - they take the inputs, apply some kind of computation, and then output a value to the output layer.\nFor example, it\u0026rsquo;s like baking bread.\n  The input layer is equivalent to the dough, but the dough has to go in the oven before it becomes a real loaf of bread. Otherwise, it is just a collection of ingredients that have been whisked together.\nThe hidden layers act similarly. They take the input, mold it and shape it in some way (like the oven for the bread), and then produce an output. The important thing is that the programmer doesn\u0026rsquo;t really know how the hidden layers are \u0026ldquo;molding and shaping\u0026rdquo; the inputs, because the computer learns by itself and creates its own special recipe to get the correct output given an input. It\u0026rsquo;s like if you put the dough in the oven without knowing what it did and then a complete loaf of bread came out.\n Finally, the output layer takes the final product from the hidden layers and then outputs it. The output layer may or may not perform some kind of computation to shape the output, but it ultimately doesn\u0026rsquo;t change the value of the output. This would be like slicing the bread after it comes out of the oven so it\u0026rsquo;s ready to eat.\n So that\u0026rsquo;s the basic theory behind how a neural network takes an input and produces an output. There are more intricacies to the layers of the network, and more specific operations to determine the exact values of neurons in the network, but I\u0026rsquo;ll get into those next time, when we actually start laying out the network\u0026rsquo;s code.\n\n .toc { cursor: default; width:100%; padding-left:var(--gap); padding-right:var(--gap); padding-top:.6em; } .topper { border-bottom: 1px solid var(--primary); padding-bottom: .6em; padding-top: .2em; } ul { margin-top: .8em; margin-bottom: .8em!important; padding-left:var(--gap); } .nnsa { box-shadow:none!important; }  Other Parts in the Neural Networks Series \u0026nbsp; ⬇️  Introduction - The Pieplatter Project Part 0 - Bits and Brains? Part 1 - Looking at Layers Part 2 - Neuron Code Part 3 - Neurons to Layers   ","permalink":"https://olinjohnson.github.io/posts/neural-networks-part-1-looking-at-layers/","summary":"If you haven\u0026rsquo;t already, it might be a good idea to go back and check out Part 0 before continuing on to part 1. Alright – the first step in the process of coding a neural network from scratch is representing the different components of the network in code.\nSince the individual neurons form the foundation of the network, I figured we\u0026rsquo;d start with those.\nBefore we begin\u0026hellip; It\u0026rsquo;s important to realize that the network we create isn\u0026rsquo;t just going to be a singular chain of neurons strung together one-by-one.","title":"Neural Networks Part 1: Looking at Layers"},{"content":"Recently, I\u0026rsquo;ve been doing a lot of work learning about AI and neural networks – specifically by creating deep learning models from scratch. So, I thought I\u0026rsquo;d document some of that learning in a multi-part series about deep learning.\nIn case you\u0026rsquo;re not already familiar, neural networks are AI processes that are modeled after the human brain and can solve problems by simulating human methods of learning.\nFor example, in the same way that your brain has learned to differentiate between cats and dogs, we can also teach a neural network to classify types of pets (among other things).\nBut how is a computer able to learn like a person? Well, let\u0026rsquo;s first look at one of the most essential building blocks of the human brain:\n  Image credit: simplypsychology.org\n  As you can see, this is a model of a neuron. For our purposes, we\u0026rsquo;ll mostly focus on the dendrites and axons of the neuron.\nIn your brain, neurons link together to form neuron chains, which propagate chemical signals from neuron to neuron. These chemical signals are what ultimately determine whether or not certain neurons fire.\nIn order to form these chains, the dendrites of one neuron connect to the axons of another (via axon terminals) over a space called a synapse. By connecting these ends, you can see how neurons can be strung together to form really long chain chains.\nIt\u0026rsquo;s kind of like plugging extension cords into each other:\n  Image credit: cloverelectric.com\n  Using the extension cord example, it\u0026rsquo;s easy to see how a lot of neurons could be connected together (billions of \u0026rsquo;em) and how they can fire in succession based on chemical signals that travel through the neuron chains.\nOk, so? In essence, a neural network tries to simulate these complex chains of neurons to make decisions like a human would.\nComputationally speaking, we can do this by representing neurons using code, and then simulating how neuron chains would fire to make a decision or judgment like a human brain.\nOf course, this is just a brief overview of the philosophy behind neural networks and it barely even scratches the surface of their complexity. Look out for Part 1 where I\u0026rsquo;ll go more in depth into the code required to create the foundation of a neural network.\n\n .toc { cursor: default; width:100%; padding-left:var(--gap); padding-right:var(--gap); padding-top:.6em; } .topper { border-bottom: 1px solid var(--primary); padding-bottom: .6em; padding-top: .2em; } ul { margin-top: .8em; margin-bottom: .8em!important; padding-left:var(--gap); } .nnsa { box-shadow:none!important; }  Other Parts in the Neural Networks Series \u0026nbsp; ⬇️  Introduction - The Pieplatter Project Part 0 - Bits and Brains? Part 1 - Looking at Layers Part 2 - Neuron Code Part 3 - Neurons to Layers   ","permalink":"https://olinjohnson.github.io/posts/neural-networks-part-0-bits-and-brains/","summary":"Recently, I\u0026rsquo;ve been doing a lot of work learning about AI and neural networks – specifically by creating deep learning models from scratch. So, I thought I\u0026rsquo;d document some of that learning in a multi-part series about deep learning.\nIn case you\u0026rsquo;re not already familiar, neural networks are AI processes that are modeled after the human brain and can solve problems by simulating human methods of learning.\nFor example, in the same way that your brain has learned to differentiate between cats and dogs, we can also teach a neural network to classify types of pets (among other things).","title":"Neural Networks Part 0: Bits and Brains?"},{"content":"Over the past month, what started as a school project has turned into a custom-built deep learning library called pieplatter that I\u0026rsquo;ve been building from scratch. It\u0026rsquo;s been quite the ordeal, and I thought I\u0026rsquo;d document some of of the build process here.\nI\u0026rsquo;ve been working hard to put the library together and get some degree of functionality. As it currently stands, it\u0026rsquo;s equipped to create small neural networks for simple problems, but I\u0026rsquo;m still adding more support and optimizations so that hopefully much bigger and more powerful networks can be created in the future.\nRight now, I still haven\u0026rsquo;t put any docs together for the library, but I\u0026rsquo;ll link those when I do. Until then, I wanted to put together a fairly large series of posts to document the entire process of coding a neural network from scratch. They\u0026rsquo;ll run through all the theory, programming, and math so you can really get a good grasp on how neural networks work under the hood and how to create some simple networks from the ground up.\nIf you want, you can check out the first of many posts in the series here.\nYou can also check out my deep learning library here on github. It\u0026rsquo;s called pieplatter.\n .toc { cursor: default; width:100%; padding-left:var(--gap); padding-right:var(--gap); padding-top:.6em; } .topper { border-bottom: 1px solid var(--primary); padding-bottom: .6em; padding-top: .2em; } ul { margin-top: .8em; margin-bottom: .8em!important; padding-left:var(--gap); } .nnsa { box-shadow:none!important; }  Other Parts in the Neural Networks Series \u0026nbsp; ⬇️  Introduction - The Pieplatter Project Part 0 - Bits and Brains? Part 1 - Looking at Layers Part 2 - Neuron Code Part 3 - Neurons to Layers   ","permalink":"https://olinjohnson.github.io/posts/the-pieplatter-project/","summary":"Over the past month, what started as a school project has turned into a custom-built deep learning library called pieplatter that I\u0026rsquo;ve been building from scratch. It\u0026rsquo;s been quite the ordeal, and I thought I\u0026rsquo;d document some of of the build process here.\nI\u0026rsquo;ve been working hard to put the library together and get some degree of functionality. As it currently stands, it\u0026rsquo;s equipped to create small neural networks for simple problems, but I\u0026rsquo;m still adding more support and optimizations so that hopefully much bigger and more powerful networks can be created in the future.","title":"The Pieplatter Project"},{"content":"I\u0026rsquo;ve recently been working on creating AIs for games like chess and othello, and I\u0026rsquo;ve been putting a lot of thought into the move generation functions and search algorithms of these AIs. Since these components are run so many times, it\u0026rsquo;s important to make sure that they are very efficient so they don\u0026rsquo;t slow down the computer too much and impact the AIs performance.\nFortunately, I was able to implement few huge optimizations that drastically reduced the running time of my AI, which included a change in how the board is represented.\nIt turns out that instead of representing the positions of pieces on the game board with something like a 2d array, there’s a much more efficient data structure we can use: a bitboard.\nActually, multiple bitboards.\nWhat I realized is that it\u0026rsquo;s much more efficient to represent the board simply as a collection of large numbers, instead of multi-dimensional arrays or some other complex structure.\nIn practice, what I mean by this is that we can take a 64 bit integer, called a bitboard, and assign each bit to a corresponding tile on a board like a chess board. By doing this, we can essentially store the board configuration using an integer, which takes up way less space in your computer\u0026rsquo;s memory than something like an array. Bitboards also have a couple other incredible advantages that I\u0026rsquo;ll dive into in a bit.\nFor example, In the game Othello, we might have 2 bitboards – 1 to represent the position of black pieces on the board and another for the white pieces. Each “on” bit, or 1, in a bitboard represents an occupied tile where a player’s piece is. Each “off” bit, or 0, represents an empty tile. This is why we have a bitboard for both black and white, to distinguish between each player’s pieces.\nDefining a bitboard in C# can be as simple as declaring an unsigned (non-negative) long integer.\nulong bitboard = 0; In a game like Othello, we can also create a class for the game board with attributes to hold the bitboards for black and white.\nclass Board { ulong white_pieces = 0; ulong black_pieces = 0; public Board() { white_pieces = 0x1008000000; black_pieces = 0x810000000; } } Now, if we initialize a new Board, it will give us the starting position for an Othello game.\nYou can see that if you convert the values for white_pieces and black_pieces from hexadecimal to binary, the activated bits in each bitboard will line up with the positions of the pieces on the board.\nulong white_pieces = 0x1008000000; /* *\t0x1008000000 = 0000000000000000000000000001000000001000000000000000000000000000 * *\t0 0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 0 *\t0 0 0 1 0 0 0 0 *\t0 0 0 0 1 0 0 0 *\t0 0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 0 */ ulong black_pieces = 0x810000000; /* *\t0x810000000 = 0000000000000000000000000000100000010000000000000000000000000000 * *\t0 0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 0 *\t0 0 0 0 1 0 0 0 *\t0 0 0 1 0 0 0 0 *\t0 0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 0 */ Why use bitboards? Well, I can assure you, though bitboards seem like a lot of hassle initially, they are well worth it for their performance benefits.\nThe primary reason why bitboards are so computationally efficient is because you can utilize bitwise operators to speed up calculation and eleminate conditionals.\nHere\u0026rsquo;s an example:\n In the game connect 4, in order to detect a win, we need to evaluate if either player has 4 in a row.\nWe can start by initializing two bitboards, one to keep track of the red player’s pieces and another to keep track of the yellow player’s pieces. Since a connect 4 board is smaller (only 42 tiles), we only need 42 bits to represent the board. So, we’ll assign each of the first 42 bits to a position on the board.\nulong red_pieces = 0; ulong yellow_pieces = 0; Now let’s assume the following board position:\nAs you can see in the above screenshot, yellow has won the game by placing 4 of their pieces vertically in a row.\nUsing a bitboard, we can check for a vertical win (in just 3 lines of code!) by utilizing the bitwise AND and bitshift operators as follows:\n// Step 1: ulong pairs = yellow_pieces \u0026amp; (yellow_pieces \u0026lt;\u0026lt; 1); // Step 2: ulong quads = pairs \u0026amp; (pairs \u0026lt;\u0026lt; 2); // Step 3 – returning the result from steps 1 and 2: return quads \u0026gt; 0 1. First of all, we start by initializing a new bitboard, called pairs.\nThe goal of this bitboard is to store all of the vertical pairs of yellow coins, all the 2-in-a-row combinations.\nTo do this, we first bitshift all the yellow pieces left 1 bit – the upwards direction.\nAs you can see, bit 19 gets shifted to bit 20, bit 20 gets shifted to bit 21, bit 21 gets shifted to bit 22, and bit 22 gets shifted to bit 23.\nNow that we have shifted all of the pieces up by 1 tile, we record which pieces align with the initial yellow pieces. If they do align, then we have found 2 in a row.\nWe can do this by using the bitwise AND operator.\n/* *\t0 0 0 0 0 0 0\t0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0\t0 0 0 1 0 0 0 *\t0 0 0 1 0 0 0\t0 0 0 1 0 0 0 *\t0 0 0 1 0 0 0\t\u0026amp;\t0 0 0 1 0 0 0 *\t0 0 0 1 0 0 0\t0 0 0 1 0 0 0 *\t0 0 0 1 0 0 0\t0 0 0 0 0 0 0 */ // 000000000000000000001111000000000000000000 \u0026amp; 000000000000000000011110000000000000000000 Bits 20, 21, and 22 are activated on both bitboards, so when we AND them together, those are the bits that will be left on.\n/* *\t0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 *\t0 0 0 1 0 0 0 *\t0 0 0 1 0 0 0 *\t0 0 0 1 0 0 0 *\t0 0 0 0 0 0 0 */ // 000000000000000000001110000000000000000000 Since there are three activated bits, we can see that there were three pairs of vertical yellow pieces.\n2. Next, we’ll repeat the whole process again to find 4 in a row – with a slight tweak.\nThis time, we’re going to calculate a bitboard called quads – we’ll take the bitboard pairs that we just calculated and bitshift it left 2 bits. This is to find “pairs of pairs”, or 4 in a row.\n// 000000000000000000001110000000000000000000 \u0026lt;\u0026lt; 2 /* * Result: * *\t0 0 0 1 0 0 0 *\t0 0 0 1 0 0 0 *\t0 0 0 1 0 0 0 *\t0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 */ // 000000000000000000111000000000000000000000 Finally, we’ll AND the result with pairs . If there are any bits left on after this operation, we’ll know we have found four in a row.\n/* *\t0 0 0 1 0 0 0\t0 0 0 0 0 0 0 *\t0 0 0 1 0 0 0\t0 0 0 0 0 0 0 *\t0 0 0 1 0 0 0\t0 0 0 1 0 0 0 *\t0 0 0 0 0 0 0\t\u0026amp;\t0 0 0 1 0 0 0 *\t0 0 0 0 0 0 0\t0 0 0 1 0 0 0 *\t0 0 0 0 0 0 0\t0 0 0 0 0 0 0 */ // 000000000000000000111000000000000000000000 \u0026amp; 000000000000000000001110000000000000000000 Result:\n/* *\t0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 *\t0 0 0 1 0 0 0 *\t0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 *\t0 0 0 0 0 0 0 */ // 000000000000000000001000000000000000000000 1 bit (that corresponds to the topmost yellow piece) has been left activated - this means that we have found four in a row.\n3. If no bits have been left activated, the value of quads will be 0, which is why we return true if quads is bigger than 1 - to signify a win.\nTo calculate four in a row in other directions too, we can just change the amount bitshifted. For example, we could calculate horizontal wins by bitshifting 6 bits to the left, instead of 1.\n As you can see, using bitboards, we are able to calculate wins in connect 4 (and many other applications) without the use of many conditionals and using very low-level operations. This makes bitboards remarkably fast – good for an AI that needs to check for wins millions of times.\nYou can imagine how bitboards can also be applied to more complex games like chess, where you\u0026rsquo;d have a bitboard for each type of piece and color (i.e. A bitboard for white knights).\nCheck out my full Connect 4 AIand Othello AI.\n","permalink":"https://olinjohnson.github.io/posts/optimizations-using-bitboards/","summary":"I\u0026rsquo;ve recently been working on creating AIs for games like chess and othello, and I\u0026rsquo;ve been putting a lot of thought into the move generation functions and search algorithms of these AIs. Since these components are run so many times, it\u0026rsquo;s important to make sure that they are very efficient so they don\u0026rsquo;t slow down the computer too much and impact the AIs performance.\nFortunately, I was able to implement few huge optimizations that drastically reduced the running time of my AI, which included a change in how the board is represented.","title":"Optimizations Using Bitboards"},{"content":"For a long time now, I\u0026rsquo;ve always found it a little bit weird that in Minecraft, only the person who gets the last swipe on the ender dragon actually earns the advancement \u0026ldquo;Free the End\u0026rdquo;.\nSo, after a suggestion from a friend, I decided to code a little plugin that would grant the advancement to every player who was involved with the fight.\nCoding the Plugin Before starting, you\u0026rsquo;ll have to install a fantastic IntelliJ plugin called Minecraft Development, which will set up our project architecture very easily for us.\nWith the plugin installed, I fired up IntelliJ and created a new project. Then I selected \u0026ldquo;minecraft\u0026rdquo;, then \u0026ldquo;spigot plugin\u0026rdquo;, so the plugin would work on my spigot server.\nAfter that, you\u0026rsquo;ll need to enter a GroupId and ArtifactId.\nFirstly, your GroupId should be your domain name backwards. So, if you have an actual domain name, you can enter it like com.yourdomainname (if it ends with .com). However, if you don\u0026rsquo;t have a domain name, you can always use your github pages subdomain. For example, my GroupId was io.github.olinjohnson.\nThen, your ArtifactId should be whatever the name of your plugin is going to be.\nAfter that, you\u0026rsquo;ll have the option to enter some additional (but not required) information, then you can click Next again, name you project, and click Create.\nFinally, IntelliJ will open a window for you to begin developing your plugin.\nIn the project\u0026rsquo;s file architecture, there is a directory called src. Inside src -\u0026gt; main -\u0026gt; java there will be a java package with the title yourGroupId.yourArtifactId. Inside this package is where the core class for the project is. If we open up the java class, we can see a couple important methods.\npackage io.github.olinjohnson.fenderender; import org.bukkit.plugin.java.JavaPlugin; public final class FenderEnder extends JavaPlugin { @Override public void onEnable(){ } @Override public void onDisable() } } The onEnable() method is called when the plugin is loaded, and onDisable is called when the plugin is terminated.\nFor now, we\u0026rsquo;re going to leave these two methods alone and create a new class inside the package called EnderDragonController.\nMy original thought process for creating this plugin was that the plugin should start by containing an event listener for whenever any entity dies. Then, it should check if the recently deceased entity is the ender dragon. If so, then it should award the \u0026ldquo;Free the End\u0026rdquo; advancement to any player in the end dimension.\nSo, lets begin by creating the event listener. We\u0026rsquo;ll want our class EnderDragonController to implement the Bukkit Listener class.\npackage io.github.olinjohnson.fenderender; import org.bukkit.Bukkit; import org.bukkit.event.Listener; public class EnderDragonController implements Listener { } Then, we\u0026rsquo;ll create a method to listen for an entity death events.\npackage io.github.olinjohnson.fenderender; import org.bukkit.Bukkit; import org.bukkit.event.Listener; import org.bukkit.event.EventHandler; import org.bukkit.event.entity.EntityDeathEvent; public class EnderDragonController implements Listener { @EventHandler public void onEnderDragonDeath(EntityDeathEvent event){ } } However, right now, this method is called whenever any entity dies. We only want it to run when the ender dragon dies. So, we\u0026rsquo;ll add a check to see if it was the ender dragon that died.\npackage io.github.olinjohnson.fenderender; import org.bukkit.Bukkit; import org.bukkit.event.Listener; import org.bukkit.event.EventHandler; import org.bukkit.event.entity.EntityDeathEvent; import org.bukkit.entity.Entity; import org.bukkit.entity.EnderDragon; public class EnderDragonController implements Listener { @EventHandler public void onEnderDragonDeath(EntityDeathEvent event){ Entity entity = event.getEntity(); if(entity instanceof EnderDragon){ } } } In the code, we can use the instanceof keyword to compare the entity in question and check if it is the ender dragon. This checks to see if the entity is an instance of the EnderDragon class.\nNow that we\u0026rsquo;ve detected the death of the ender dragon, we need to reward all players in the end dimension with the advancement. We\u0026rsquo;ll start by retrieving a list of all the online players with Bukkit.getOnlinePlayers(). This returns a Java collection, which we can iterate over in a for loop.\npackage io.github.olinjohnson.fenderender; import org.bukkit.Bukkit; import org.bukkit.event.Listener; import org.bukkit.event.EventHandler; import org.bukkit.event.entity.EntityDeathEvent; import org.bukkit.entity.Entity; import org.bukkit.entity.EnderDragon; import org.bukkit.entity.Player; public class EnderDragonController implements Listener { @EventHandler public void onEnderDragonDeath(EntityDeathEvent event){ Entity entity = event.getEntity(); if(entity instanceof EnderDragon){ for(Player p: Bukkit.getOnlinePlayers()){ } } } } Then, we\u0026rsquo;ll add a check to see which players in the collection are in the end dimension.\npackage io.github.olinjohnson.fenderender; import org.bukkit.Bukkit; import org.bukkit.event.Listener; import org.bukkit.event.EventHandler; import org.bukkit.event.entity.EntityDeathEvent; import org.bukkit.entity.Entity; import org.bukkit.entity.EnderDragon; import org.bukkit.World; public class EnderDragonController implements Listener { @EventHandler public void onEnderDragonDeath(EntityDeathEvent event){ Entity entity = event.getEntity(); if(entity instanceof EnderDragon){ for(Player p: Bukkit.getOnlinePlayers()){ if(p.getWorld().getEnvironment() == World.Environment.THE_END){ } } } } } Finally, now that we\u0026rsquo;ve compiled a collection of players who were in the end while the ender dragon was killed, we need to reward them all with the advancement \u0026ldquo;Free the End\u0026rdquo;.\nWe\u0026rsquo;ll start by storing a reference to the advancement name in an instance of Bukkit\u0026rsquo;s NamespacedKey class. Then, we\u0026rsquo;ll get a reference to the player\u0026rsquo;s progress towards the advancement.\n// Reference to the advancement name NamespacedKey key = NamespacedKey.minecraft(\u0026#34;end/kill_dragon\u0026#34;); // Get the player\u0026#39;s current progress AdvancementProgress progress = p.getAdvancementProgress(Bukkit.getAdvancement(key)); Then, we\u0026rsquo;ll evaluate every remaining criteria that a player has to complete to fulfill this advancement. We\u0026rsquo;ll update any incomplete criteria to be complete.\n// Reference to the advancement name NamespacedKey key = NamespacedKey.minecraft(\u0026#34;end/kill_dragon\u0026#34;); // Get the player\u0026#39;s current progress AdvancementProgress progress = p.getAdvancementProgress(Bukkit.getAdvancement(key)); // Iterate over remaining criteria for(String stuff_left: progress.getRemainingCriteria()){ // Grant progress towards the advancement progress.awardCriteria(left); } This will award a player with the advancement.\nFinally, all your code in the EnderDragonController class should look similar to this:\npackage io.github.olinjohnson.fenderender; import org.bukkit.Bukkit; import org.bukkit.event.Listener; import org.bukkit.event.EventHandler; import org.bukkit.event.entity.EntityDeathEvent; import org.bukkit.entity.Entity; import org.bukkit.entity.EnderDragon; import org.bukkit.entity.Player; import org.bukkit.World; import org.bukkit.NamespacedKey; import org.bukkit.advancement.AdvancementProgress; public class EnderDragonController implements Listener { @EventHandler public void onEnderDragonDeath(EntityDeathEvent event){ Entity entity = event.getEntity(); if(entity instanceof EnderDragon){ for(Player p: Bukkit.getOnlinePlayers()){ if(p.getWorld().getEnvironment() == World.Environment.THE_END){ NamespacedKey key = NamespacedKey.minecraft(\u0026#34;end/kill_dragon\u0026#34;); AdvancementProgress progress = p.getAdvancementProgress(Bukkit.getAdvancement(key)); for(String stuff_left: progress.getRemainingCriteria()){ progress.awardCriteria(stuff_left); } } } } } } Alright! We\u0026rsquo;re almost done. Just one more small thing to do.\nNavigate back to your core class, the one with the same name as the title of your project.\nIn the onEnable() method, we need to initialize our EnderDragonController class, so it knows to actually listen for events.\npackage io.github.olinjohnson.fenderender; import org.bukkit.plugin.java.JavaPlugin; public final class FenderEnder extends JavaPlugin { @Override public void onEnable() { getServer().getPluginManager().registerEvents(new EnderDragonController(), this); } @Override public void onDisable() {} } Now we\u0026rsquo;re done!\nYou can package your plugin into a jar file by selecting Build -\u0026gt; Build Project, using CTRL + F9, or by running mvn package from the root level of your project.\nThis will create a jar file in your project\u0026rsquo;s target directory, which you can then import into your server\u0026rsquo;s plugins directory to see it in action!\nThe final code for this project can be viewed here on GitHub.\n","permalink":"https://olinjohnson.github.io/posts/code-for-an-ender-dragon-conquistador/","summary":"For a long time now, I\u0026rsquo;ve always found it a little bit weird that in Minecraft, only the person who gets the last swipe on the ender dragon actually earns the advancement \u0026ldquo;Free the End\u0026rdquo;.\nSo, after a suggestion from a friend, I decided to code a little plugin that would grant the advancement to every player who was involved with the fight.\nCoding the Plugin Before starting, you\u0026rsquo;ll have to install a fantastic IntelliJ plugin called Minecraft Development, which will set up our project architecture very easily for us.","title":"Code for an Ender Dragon Conquistador"},{"content":"Hello, world!\n","permalink":"https://olinjohnson.github.io/posts/my-first-post/","summary":"Hello, world!","title":"My First Post"},{"content":"Howdy, I\u0026rsquo;m Olin! I’m a web developer, AI enthusiast, and cybersecurity aficionado.\nA few things I like to do\u0026hellip;  I love coding - especially AI. I like CTFs. I started doing CTFs a while ago while on a mission to learn more about cybersecurity. I like making music. I like running and skiing.  A few projects I\u0026rsquo;ve completed\u0026hellip;  Othello clone with AI Connect 4 clone with AI Sudoku solver \u0026amp; generator Minesweeper clone 2048 clone   Contributed to numpy Contributed to matplotlib  What I\u0026rsquo;m currently working on\u0026hellip;  A mediocre chess engine A custom machine learning framework Open source projects  📫 How to reach me: nervy.panoply.0w@icloud.com\n","permalink":"https://olinjohnson.github.io/about/","summary":"Howdy, I\u0026rsquo;m Olin! I’m a web developer, AI enthusiast, and cybersecurity aficionado.\nA few things I like to do\u0026hellip;  I love coding - especially AI. I like CTFs. I started doing CTFs a while ago while on a mission to learn more about cybersecurity. I like making music. I like running and skiing.  A few projects I\u0026rsquo;ve completed\u0026hellip;  Othello clone with AI Connect 4 clone with AI Sudoku solver \u0026amp; generator Minesweeper clone 2048 clone   Contributed to numpy Contributed to matplotlib  What I\u0026rsquo;m currently working on\u0026hellip;  A mediocre chess engine A custom machine learning framework Open source projects  📫 How to reach me: nervy.","title":"About"},{"content":"","permalink":"https://olinjohnson.github.io/projects/","summary":"","title":"Past Projects"}]